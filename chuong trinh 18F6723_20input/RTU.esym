D G "__PCH__" 0 243 ""5.046""
D G "__DEVICE__" 0 243 "6723"
D G "__DATE__" 0 243 ""20-Jun-17""
D G "__TIME__" 0 243 ""08:13:34""
D G "_UNICODE" 0 243 ""?"" "Standard Header file for the PIC18F6723 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 43 ""
v L "value" 2 43 "int8" `54 
f B "set_tris_a" 2 43 "void(int8 value)" `53 
f N "set_tris_b" 2 44 ""
v L "value" 2 44 "int8" `56 
f B "set_tris_b" 2 44 "void(int8 value)" `55 
f N "set_tris_c" 2 45 ""
v L "value" 2 45 "int8" `58 
f B "set_tris_c" 2 45 "void(int8 value)" `57 
f N "set_tris_d" 2 46 ""
v L "value" 2 46 "int8" `60 
f B "set_tris_d" 2 46 "void(int8 value)" `59 
f N "set_tris_e" 2 47 ""
v L "value" 2 47 "int8" `62 
f B "set_tris_e" 2 47 "void(int8 value)" `61 
f N "set_tris_f" 2 48 ""
v L "value" 2 48 "int8" `64 
f B "set_tris_f" 2 48 "void(int8 value)" `63 
f N "set_tris_g" 2 49 ""
v L "value" 2 49 "int8" `66 
f B "set_tris_g" 2 49 "void(int8 value)" `65 
f N "get_tris_a" 2 50 ""
f B "get_tris_a" 2 50 "int8()" `67 
f N "get_tris_b" 2 51 ""
f B "get_tris_b" 2 51 "int8()" `68 
f N "get_tris_c" 2 52 ""
f B "get_tris_c" 2 52 "int8()" `69 
f N "get_tris_d" 2 53 ""
f B "get_tris_d" 2 53 "int8()" `70 
f N "get_tris_e" 2 54 ""
f B "get_tris_e" 2 54 "int8()" `71 
f N "get_tris_f" 2 55 ""
f B "get_tris_f" 2 55 "int8()" `72 
f N "get_tris_g" 2 56 ""
f B "get_tris_g" 2 56 "int8()" `73 
f N "output_a" 2 57 ""
v L "value" 2 57 "int8" `75 
f B "output_a" 2 57 "void(int8 value)" `74 
f N "output_b" 2 58 ""
v L "value" 2 58 "int8" `77 
f B "output_b" 2 58 "void(int8 value)" `76 
f N "output_c" 2 59 ""
v L "value" 2 59 "int8" `79 
f B "output_c" 2 59 "void(int8 value)" `78 
f N "output_d" 2 60 ""
v L "value" 2 60 "int8" `81 
f B "output_d" 2 60 "void(int8 value)" `80 
f N "output_e" 2 61 ""
v L "value" 2 61 "int8" `83 
f B "output_e" 2 61 "void(int8 value)" `82 
f N "output_f" 2 62 ""
v L "value" 2 62 "int8" `85 
f B "output_f" 2 62 "void(int8 value)" `84 
f N "output_g" 2 63 ""
v L "value" 2 63 "int8" `87 
f B "output_g" 2 63 "void(int8 value)" `86 
f N "input_a" 2 64 ""
f B "input_a" 2 64 "int8()" `88 
f N "input_b" 2 65 ""
f B "input_b" 2 65 "int8()" `89 
f N "input_c" 2 66 ""
f B "input_c" 2 66 "int8()" `90 
f N "input_d" 2 67 ""
f B "input_d" 2 67 "int8()" `91 
f N "input_e" 2 68 ""
f B "input_e" 2 68 "int8()" `92 
f N "input_f" 2 69 ""
f B "input_f" 2 69 "int8()" `93 
f N "input_g" 2 70 ""
f B "input_g" 2 70 "int8()" `94 
f N "input_change_a" 2 71 ""
f B "input_change_a" 2 71 "int8()" `95 
f N "input_change_b" 2 72 ""
f B "input_change_b" 2 72 "int8()" `96 
f N "input_change_c" 2 73 ""
f B "input_change_c" 2 73 "int8()" `97 
f N "input_change_d" 2 74 ""
f B "input_change_d" 2 74 "int8()" `98 
f N "input_change_e" 2 75 ""
f B "input_change_e" 2 75 "int8()" `99 
f N "input_change_f" 2 76 ""
f B "input_change_f" 2 76 "int8()" `100 
f N "input_change_g" 2 77 ""
f B "input_change_g" 2 77 "int8()" `101 
f N "port_b_pullups" 2 78 ""
v L "value" 2 78 "int8" `103 
f B "port_b_pullups" 2 78 "void(int8 value)" `102 
f N "input" 2 79 ""
v L "pin" 2 79 "int16" `105 
f B "input" 2 79 "int8(int16 pin)" `104 
f N "input_state" 2 80 ""
v L "pin" 2 80 "int16" `107 
f B "input_state" 2 80 "int8(int16 pin)" `106 
f N "output_low" 2 81 ""
v L "pin" 2 81 "int16" `109 
f B "output_low" 2 81 "void(int16 pin)" `108 
f N "output_high" 2 82 ""
v L "pin" 2 82 "int16" `111 
f B "output_high" 2 82 "void(int16 pin)" `110 
f N "output_toggle" 2 83 ""
v L "pin" 2 83 "int16" `113 
f B "output_toggle" 2 83 "void(int16 pin)" `112 
f N "output_bit" 2 84 ""
v L "pin" 2 84 "int16" `115 
v L "level" 2 84 "int8" `116 
f B "output_bit" 2 84 "void(int16 pin,int8 level)" `114 
f N "output_float" 2 85 ""
v L "pin" 2 85 "int16" `118 
f B "output_float" 2 85 "void(int16 pin)" `117 
f N "output_drive" 2 86 ""
v L "pin" 2 86 "int16" `120 
f B "output_drive" 2 86 "void(int16 pin)" `119  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 90 "31744"
d G "PIN_A1" 2 91 "31745"
d G "PIN_A2" 2 92 "31746"
d G "PIN_A3" 2 93 "31747"
d G "PIN_A4" 2 94 "31748"
d G "PIN_A5" 2 95 "31749"
d G "PIN_A6" 2 96 "31750"
d G "PIN_A7" 2 97 "31751"
d G "PIN_B0" 2 99 "31752"
d G "PIN_B1" 2 100 "31753"
d G "PIN_B2" 2 101 "31754"
d G "PIN_B3" 2 102 "31755"
d G "PIN_B4" 2 103 "31756"
d G "PIN_B5" 2 104 "31757"
d G "PIN_B6" 2 105 "31758"
d G "PIN_B7" 2 106 "31759"
d G "PIN_C0" 2 108 "31760"
d G "PIN_C1" 2 109 "31761"
d G "PIN_C2" 2 110 "31762"
d G "PIN_C3" 2 111 "31763"
d G "PIN_C4" 2 112 "31764"
d G "PIN_C5" 2 113 "31765"
d G "PIN_C6" 2 114 "31766"
d G "PIN_C7" 2 115 "31767"
d G "PIN_D0" 2 117 "31768"
d G "PIN_D1" 2 118 "31769"
d G "PIN_D2" 2 119 "31770"
d G "PIN_D3" 2 120 "31771"
d G "PIN_D4" 2 121 "31772"
d G "PIN_D5" 2 122 "31773"
d G "PIN_D6" 2 123 "31774"
d G "PIN_D7" 2 124 "31775"
d G "PIN_E0" 2 126 "31776"
d G "PIN_E1" 2 127 "31777"
d G "PIN_E2" 2 128 "31778"
d G "PIN_E3" 2 129 "31779"
d G "PIN_E4" 2 130 "31780"
d G "PIN_E5" 2 131 "31781"
d G "PIN_E6" 2 132 "31782"
d G "PIN_E7" 2 133 "31783"
d G "PIN_F0" 2 135 "31784"
d G "PIN_F1" 2 136 "31785"
d G "PIN_F2" 2 137 "31786"
d G "PIN_F3" 2 138 "31787"
d G "PIN_F4" 2 139 "31788"
d G "PIN_F5" 2 140 "31789"
d G "PIN_F6" 2 141 "31790"
d G "PIN_F7" 2 142 "31791"
d G "PIN_G0" 2 144 "31792"
d G "PIN_G1" 2 145 "31793"
d G "PIN_G2" 2 146 "31794"
d G "PIN_G3" 2 147 "31795"
d G "PIN_G4" 2 148 "31796"
d G "PIN_G5" 2 149 "31797"
d G "FALSE" 2 152 "0"
d G "TRUE" 2 153 "1"
d G "BYTE" 2 155 "int8"
d G "BOOLEAN" 2 156 "int1"
d G "getc" 2 158 "getch"
d G "fgetc" 2 159 "getch"
d G "getchar" 2 160 "getch"
d G "putc" 2 161 "putchar"
d G "fputc" 2 162 "putchar"
d G "fgets" 2 163 "gets"
d G "fputs" 2 164 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 169 ""
f B "restart_cause" 2 169 "int8()" `121 
f N "reset_cpu" 2 170 ""
f B "reset_cpu" 2 170 "void()" `122 
f N "sleep" 2 171 ""
f B "sleep" 2 171 "void()" `123 
f N "sleep" 2 172 ""
v L "type" 2 172 "int8" `125 
f G "sleep" 2 172 "void(int8 type)" `124  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 174 "7"
d G "MCLR_FROM_SLEEP" 2 175 "11"
d G "MCLR_FROM_RUN" 2 176 "15"
d G "NORMAL_POWER_UP" 2 177 "12"
d G "BROWNOUT_RESTART" 2 178 "14"
d G "WDT_FROM_SLEEP" 2 179 "3"
d G "RESET_INSTRUCTION" 2 180 "0"
d G "SLEEP_FULL" 2 183 "0" "Default"
d G "SLEEP_IDLE" 2 184 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 191 ""
v L "mode" 2 191 "int8" `127 
f B "setup_timer_0" 2 191 "void(int8 mode)" `126 
f N "set_timer0" 2 192 ""
v L "value" 2 192 "int16" `129 
f B "set_timer0" 2 192 "void(int16 value)" `128 
f N "get_timer0" 2 193 ""
f B "get_timer0" 2 193 "int16()" `130 
f N "setup_counters" 2 194 ""
v L "mode" 2 194 "int8" `132 
v L "prescaler" 2 194 "int8" `133 
f B "setup_counters" 2 194 "void(int8 mode,int8 prescaler)" `131 
f N "set_rtcc" 2 195 ""
v L "value" 2 195 "int16" `135 
f B "set_rtcc" 2 195 "void(int16 value)" `134 
f N "get_rtcc" 2 196 ""
f B "get_rtcc" 2 196 "int16()" `136  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 198 "0"
d G "T0_EXT_L_TO_H" 2 199 "32"
d G "T0_EXT_H_TO_L" 2 200 "48"
d G "T0_DIV_1" 2 202 "8"
d G "T0_DIV_2" 2 203 "0"
d G "T0_DIV_4" 2 204 "1"
d G "T0_DIV_8" 2 205 "2"
d G "T0_DIV_16" 2 206 "3"
d G "T0_DIV_32" 2 207 "4"
d G "T0_DIV_64" 2 208 "5"
d G "T0_DIV_128" 2 209 "6"
d G "T0_DIV_256" 2 210 "7"
d G "T0_OFF" 2 212 "0x80"
d G "T0_8_BIT" 2 214 "0x40"
d G "RTCC_INTERNAL" 2 216 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 217 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 218 "48"
d G "RTCC_DIV_1" 2 219 "8"
d G "RTCC_DIV_2" 2 220 "0"
d G "RTCC_DIV_4" 2 221 "1"
d G "RTCC_DIV_8" 2 222 "2"
d G "RTCC_DIV_16" 2 223 "3"
d G "RTCC_DIV_32" 2 224 "4"
d G "RTCC_DIV_64" 2 225 "5"
d G "RTCC_DIV_128" 2 226 "6"
d G "RTCC_DIV_256" 2 227 "7"
d G "RTCC_OFF" 2 228 "0x80"
d G "RTCC_8_BIT" 2 229 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 240 ""
v L "mode" 2 240 "int16" `138 
f B "setup_wdt" 2 240 "void(int16 mode)" `137 
f N "restart_wdt" 2 241 ""
f B "restart_wdt" 2 241 "void()" `139  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 243 "0x100"
d G "WDT_OFF" 2 244 "0"
d G "WDT_4MS" 2 246 "0x300"
d G "WDT_8MS" 2 247 "0x500"
d G "WDT_16MS" 2 248 "0x700"
d G "WDT_32MS" 2 249 "0x900"
d G "WDT_64MS" 2 250 "0xB00"
d G "WDT_128MS" 2 251 "0xD00"
d G "WDT_256MS" 2 252 "0xF00"
d G "WDT_512MS" 2 253 "0x1100"
d G "WDT_1S" 2 254 "0x1300"
d G "WDT_2S" 2 255 "0x1500"
d G "WDT_4S" 2 256 "0x1700"
d G "WDT_8S" 2 257 "0x1900"
d G "WDT_16" 2 258 "0x1B00"
d G "WDT_32S" 2 259 "0x1D00"
d G "WDT_64S" 2 260 "0x1F00"
d G "WDT_128S" 2 261 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 266 ""
v L "mode" 2 266 "int16" `141 
f B "setup_timer_1" 2 266 "void(int16 mode)" `140 
f N "get_timer1" 2 267 ""
f B "get_timer1" 2 267 "int16()" `142 
f N "set_timer1" 2 268 ""
v L "value" 2 268 "int16" `144 
f B "set_timer1" 2 268 "void(int16 value)" `143  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 271 "0"
d G "T1_INTERNAL" 2 272 "0x85"
d G "T1_EXTERNAL" 2 273 "0x87"
d G "T1_EXTERNAL_SYNC" 2 274 "0x83"
d G "T1_CLK_OUT" 2 276 "8"
d G "T1_DIV_BY_1" 2 278 "0"
d G "T1_DIV_BY_2" 2 279 "0x10"
d G "T1_DIV_BY_4" 2 280 "0x20"
d G "T1_DIV_BY_8" 2 281 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 286 ""
v L "mode" 2 286 "int8" `146 
v L "period" 2 286 "int8" `147 
v L "postscale" 2 286 "int8" `148 
f B "setup_timer_2" 2 286 "void(int8 mode,int8 period,int8 postscale)" `145 
f N "get_timer2" 2 287 ""
f B "get_timer2" 2 287 "int8()" `149 
f N "set_timer2" 2 288 ""
v L "value" 2 288 "int8" `151 
f B "set_timer2" 2 288 "void(int8 value)" `150  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 290 "0"
d G "T2_DIV_BY_1" 2 291 "4"
d G "T2_DIV_BY_4" 2 292 "5"
d G "T2_DIV_BY_16" 2 293 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_timer_3" 2 298 ""
v L "mode" 2 298 "int16" `153 
f B "setup_timer_3" 2 298 "void(int16 mode)" `152 
f N "get_timer3" 2 299 ""
f B "get_timer3" 2 299 "int16()" `154 
f N "set_timer3" 2 300 ""
v L "value" 2 300 "int16" `156 
f B "set_timer3" 2 300 "void(int16 value)" `155  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 303 "0"
d G "T3_INTERNAL" 2 304 "0x85"
d G "T3_EXTERNAL" 2 305 "0x87"
d G "T3_EXTERNAL_SYNC" 2 306 "0x83"
d G "T3_DIV_BY_1" 2 308 "0"
d G "T3_DIV_BY_2" 2 309 "0x10"
d G "T3_DIV_BY_4" 2 310 "0x20"
d G "T3_DIV_BY_8" 2 311 "0x30"
d G "T3_CCP1_TO_5" 2 314 "0x48"
d G "T3_CCP2_TO_5" 2 315 "0x8"
d G "T3_CCP3_TO_5" 2 316 "0x40"
c L "set_timer3" 2 3 3 "FUNCTION"
f N "setup_timer_4" 2 321 ""
v L "mode" 2 321 "int16" `158 
v L "period" 2 321 "int8" `159 
v L "postscaler" 2 321 "int8" `160 
f B "setup_timer_4" 2 321 "void(int16 mode,int8 period,int8 postscaler)" `157 
f N "get_timer4" 2 322 ""
f B "get_timer4" 2 322 "int8()" `161 
f N "set_timer4" 2 323 ""
v L "value" 2 323 "int8" `163 
f B "set_timer4" 2 323 "void(int8 value)" `162  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 2 325 "0"
d G "T4_DIV_BY_1" 2 326 "4"
d G "T4_DIV_BY_4" 2 327 "5"
d G "T4_DIV_BY_16" 2 328 "6"
c L "set_timer4" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 334 ""
v L "mode" 2 334 "int32" `165 
f B "setup_ccp1" 2 334 "void(int32 mode)" `164 
f N "setup_ccp1" 2 335 ""
v L "mode" 2 335 "int32" `167 
v L "pwm" 2 335 "int8" `168 
f G "setup_ccp1" 2 335 "void(int32 mode,int8 pwm)" `166 
f N "set_pwm1_duty" 2 336 ""
v L "value" 2 336 "int16" `170 
f B "set_pwm1_duty" 2 336 "void(int16 value)" `169  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 338 "0"
d G "CCP_CAPTURE_FE" 2 339 "0x04"
d G "CCP_CAPTURE_RE" 2 340 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 341 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 342 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 343 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 344 "0x09"
d G "CCP_COMPARE_INT" 2 345 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 346 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 347 "0x0B"
d G "CCP_PWM" 2 348 "0x0C"
d G "CCP_PWM_PLUS_1" 2 349 "0x1c"
d G "CCP_PWM_PLUS_2" 2 350 "0x2c"
d G "CCP_PWM_PLUS_3" 2 351 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
d G "CCP_PWM_H_H" 2 358 "0x0c"
d G "CCP_PWM_H_L" 2 359 "0x0d"
d G "CCP_PWM_L_H" 2 360 "0x0e"
d G "CCP_PWM_L_L" 2 361 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 363 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 364 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 365 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 367 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 368 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 369 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 370 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 371 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 372 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 373 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 375 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 376 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 377 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 379 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 380 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 381 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 383 "0x80000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 387 ""
v L "mode" 2 387 "int32" `175 
f B "setup_ccp2" 2 387 "void(int32 mode)" `174 
f N "setup_ccp2" 2 388 ""
v L "mode" 2 388 "int32" `177 
v L "pwm" 2 388 "int8" `178 
f G "setup_ccp2" 2 388 "void(int32 mode,int8 pwm)" `176 
f N "set_pwm2_duty" 2 389 ""
v L "value" 2 389 "int16" `180 
f B "set_pwm2_duty" 2 389 "void(int16 value)" `179 
c L "set_pwm2_duty" 2 3 1 "FUNCTION"
f N "setup_ccp3" 2 395 ""
v L "mode" 2 395 "int32" `185 
f B "setup_ccp3" 2 395 "void(int32 mode)" `184 
f N "setup_ccp3" 2 396 ""
v L "mode" 2 396 "int32" `187 
v L "pwm" 2 396 "int8" `188 
f G "setup_ccp3" 2 396 "void(int32 mode,int8 pwm)" `186 
f N "set_pwm3_duty" 2 397 ""
v L "value" 2 397 "int16" `190 
f B "set_pwm3_duty" 2 397 "void(int16 value)" `189 
c L "set_pwm3_duty" 2 3 1 "FUNCTION"
f N "setup_ccp4" 2 403 ""
v L "mode" 2 403 "int32" `195 
f B "setup_ccp4" 2 403 "void(int32 mode)" `194 
f N "setup_ccp4" 2 404 ""
v L "mode" 2 404 "int32" `197 
v L "pwm" 2 404 "int8" `198 
f G "setup_ccp4" 2 404 "void(int32 mode,int8 pwm)" `196 
f N "set_pwm4_duty" 2 405 ""
v L "value" 2 405 "int16" `200 
f B "set_pwm4_duty" 2 405 "void(int16 value)" `199 
c L "set_pwm4_duty" 2 3 1 "FUNCTION"
f N "setup_ccp5" 2 411 ""
v L "mode" 2 411 "int32" `205 
f B "setup_ccp5" 2 411 "void(int32 mode)" `204 
f N "setup_ccp5" 2 412 ""
v L "mode" 2 412 "int32" `207 
v L "pwm" 2 412 "int8" `208 
f G "setup_ccp5" 2 412 "void(int32 mode,int8 pwm)" `206 
f N "set_pwm5_duty" 2 413 ""
v L "value" 2 413 "int16" `210 
f B "set_pwm5_duty" 2 413 "void(int16 value)" `209 
c L "set_pwm5_duty" 2 3 5 "FUNCTION"
f N "setup_psp" 2 422 ""
v L "mode" 2 422 "int8" `215 
f B "setup_psp" 2 422 "void(int8 mode)" `214 
f N "psp_output_full" 2 423 ""
f B "psp_output_full" 2 423 "int8()" `216 
f N "psp_input_full" 2 424 ""
f B "psp_input_full" 2 424 "int8()" `217 
f N "psp_overflow" 2 425 ""
f B "psp_overflow" 2 425 "int8()" `218  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 2 427 "0x10"
d G "PSP_DISABLED" 2 428 "0"
c L "psp_overflow" 2 3 3 "FUNCTION"
f N "setup_spi" 2 435 ""
v L "mode" 2 435 "int32" `221 
f B "setup_spi" 2 435 "void(int32 mode)" `220 
f N "spi_write" 2 436 ""
v L "value" 2 436 "int8" `223 
f B "spi_write" 2 436 "void(int8 value)" `222 
f N "spi_read" 2 437 ""
f B "spi_read" 2 437 "int8()" `224 
f N "spi_read" 2 438 ""
v L "value" 2 438 "int8" `226 
f G "spi_read" 2 438 "int8(int8 value)" `225 
f N "spi_data_in" 2 439 ""
f B "spi_data_in" 2 439 "int8()" `227 
f N "setup_spi2" 2 440 ""
v L "mode" 2 440 "int32" `229 
f B "setup_spi2" 2 440 "void(int32 mode)" `228 
f N "spi_write2" 2 441 ""
v L "value" 2 441 "int8" `231 
f B "spi_write2" 2 441 "void(int8 value)" `230 
f N "spi_read2" 2 442 ""
f B "spi_read2" 2 442 "int8()" `232 
f N "spi_read2" 2 443 ""
v L "value" 2 443 "int8" `234 
f G "spi_read2" 2 443 "int8(int8 value)" `233 
f N "spi_data_in2" 2 444 ""
f B "spi_data_in2" 2 444 "int8()" `235  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 446 "0x00"
d G "SPI_MASTER" 2 447 "0x20"
d G "SPI_SLAVE" 2 448 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 449 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 450 "0x00"
d G "SPI_CLK_DIV_4" 2 451 "0x00"
d G "SPI_CLK_DIV_16" 2 452 "0x01"
d G "SPI_CLK_DIV_64" 2 453 "0x02"
d G "SPI_CLK_T2" 2 454 "0x03"
d G "SPI_SS_DISABLED" 2 455 "0x01"
d G "SPI_XMIT_L_TO_H" 2 457 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 458 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 460 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 461 "0x8000"
d G "SPI_L_TO_H" 2 464 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 465 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 3 2 "FUNCTION"
f N "setup_uart" 2 469 ""
v L "baud" 2 469 "int32" `237 
f B "setup_uart" 2 469 "void(int32 baud)" `236 
f N "setup_uart" 2 470 ""
v L "baud" 2 470 "int32" `239 
v L "stream" 2 470 "int8" `240 
f G "setup_uart" 2 470 "void(int32 baud,int8 stream)" `238 
f N "setup_uart" 2 471 ""
v L "baud" 2 471 "int32" `242 
v L "stream" 2 471 "int8" `243 
v L "clock" 2 471 "int32" `244 
f G "setup_uart" 2 471 "void(int32 baud,int8 stream,int32 clock)" `241 
f N "set_uart_speed" 2 472 ""
v L "baud" 2 472 "int32" `246 
f B "set_uart_speed" 2 472 "void(int32 baud)" `245 
f N "set_uart_speed" 2 473 ""
v L "baud" 2 473 "int32" `248 
v L "stream" 2 473 "int8" `249 
f G "set_uart_speed" 2 473 "void(int32 baud,int8 stream)" `247 
f N "set_uart_speed" 2 474 ""
v L "baud" 2 474 "int32" `251 
v L "stream" 2 474 "int8" `252 
v L "clock" 2 474 "int32" `253 
f G "set_uart_speed" 2 474 "void(int32 baud,int8 stream,int32 clock)" `250  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 478 "2"
d G "UART_DATA" 2 479 "4"
d G "UART_AUTODETECT" 2 480 "8"
d G "UART_AUTODETECT_NOWAIT" 2 481 "9"
d G "UART_WAKEUP_ON_RDA" 2 482 "10"
d G "UART_SEND_BREAK" 2 483 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 487 ""
v L "mode" 2 487 "int32" `255 
f B "setup_comparator" 2 487 "void(int32 mode)" `254  "Constants used in setup_comparator() are:"
d G "F6_F5_F4_F5" 2 489 "0x70ff04"
d G "F6_F5_F4_F3_OUT_ON_F2_F1" 2 490 "0x78F903"
d G "F6_F5_F4_F5_OUT_ON_F2_F1" 2 491 "0x70F905"
d G "NC_NC_NC_NC" 2 492 "0x00ff07"
d G "F6_F5_F4_F3" 2 493 "0x78ff02"
d G "F6_F5_NC_NC_OUT_ON_F2" 2 494 "0x60FB01"
d G "F6_VR_F4_VR" 2 495 "0x50ff06"
d G "F5_VR_F3_VR" 2 496 "0x28ff0e"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 503 ""
v L "mode" 2 503 "int8" `259 
f B "setup_vref" 2 503 "void(int8 mode)" `258  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 505 "0xa0"
d G "VREF_HIGH" 2 506 "0x80"
d G "VREF_F5" 2 508 "0x40"
d G "VREF_COMP" 2 509 "0x10"
c L "setup_vref" 2 3 2 "FUNCTION"
f N "setup_low_volt_detect" 2 513 ""
v L "mode" 2 513 "int8" `261 
f B "setup_low_volt_detect" 2 513 "void(int8 mode)" `260  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 515 "0x1F"
d G "LVD_45" 2 516 "0x1E"
d G "LVD_42" 2 517 "0x1D"
d G "LVD_40" 2 518 "0x1C"
d G "LVD_38" 2 519 "0x1B"
d G "LVD_36" 2 520 "0x1A"
d G "LVD_35" 2 521 "0x19"
d G "LVD_33" 2 522 "0x18"
d G "LVD_30" 2 523 "0x17"
d G "LVD_28" 2 524 "0x16"
d G "LVD_27" 2 525 "0x15"
d G "LVD_25" 2 526 "0x14"
d G "LVD_23" 2 527 "0x13"
d G "LVD_21" 2 528 "0x12"
d G "LVD_19" 2 529 "0x11"
d G "LVD_TRIGGER_BELOW" 2 531 "0"
d G "LVD_TRIGGER_ABOVE" 2 532 "0x80"
c L "setup_low_volt_detect" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 537 ""
v L "mode" 2 537 "int8" `263 
f B "setup_oscillator" 2 537 "int8(int8 mode)" `262 
f N "setup_oscillator" 2 538 ""
v L "mode" 2 538 "int8" `265 
v L "tune" 2 538 "sint8" `266 
f G "setup_oscillator" 2 538 "int8(int8 mode,sint8 tune)" `264  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 541 "0"
d G "OSC_125KHZ" 2 542 "0x10"
d G "OSC_250KHZ" 2 543 "0x20"
d G "OSC_500KHZ" 2 544 "0x30"
d G "OSC_1MHZ" 2 545 "0x40"
d G "OSC_2MHZ" 2 546 "0x50"
d G "OSC_4MHZ" 2 547 "0x60"
d G "OSC_8MHZ" 2 548 "0x70"
d G "OSC_16MHZ" 2 549 "0x4060"
d G "OSC_32MHZ" 2 550 "0x4070"
d G "OSC_TIMER1" 2 552 "1"
d G "OSC_INTRC" 2 553 "2"
d G "OSC_NORMAL" 2 554 "0"
d G "OSC_IDLE_MODE" 2 556 "0x80"
d G "OSC_31250" 2 557 "0x8000"
d G "OSC_PLL_ON" 2 558 "0x4000"
d G "OSC_PLL_OFF" 2 559 "0"
d G "OSC_STATE_STABLE" 2 563 "4"
d G "OSC_STATE_EXT_RUNNING" 2 564 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 571 ""
v L "mode" 2 571 "int16" `268 
f B "setup_adc" 2 571 "void(int16 mode)" `267 
f N "read_adc" 2 572 ""
f B "read_adc" 2 572 "int8()" `269 
f N "read_adc" 2 573 ""
v L "mode" 2 573 "int8" `271 
f G "read_adc" 2 573 "int8(int8 mode)" `270 
f N "read_adc" 2 574 ""
f G "read_adc" 2 574 "int16()" `272 
f N "read_adc" 2 575 ""
v L "mode" 2 575 "int8" `274 
f G "read_adc" 2 575 "int16(int8 mode)" `273 
f N "adc_done" 2 576 ""
f B "adc_done" 2 576 "int8()" `275  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 578 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 579 "0x100"
d G "ADC_CLOCK_DIV_4" 2 580 "0x04"
d G "ADC_CLOCK_DIV_8" 2 581 "0x01"
d G "ADC_CLOCK_DIV_16" 2 582 "0x05"
d G "ADC_CLOCK_DIV_32" 2 583 "0x02"
d G "ADC_CLOCK_DIV_64" 2 584 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 585 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 587 "0x00"
d G "ADC_TAD_MUL_2" 2 588 "0x08"
d G "ADC_TAD_MUL_4" 2 589 "0x10"
d G "ADC_TAD_MUL_6" 2 590 "0x18"
d G "ADC_TAD_MUL_8" 2 591 "0x20"
d G "ADC_TAD_MUL_12" 2 592 "0x28"
d G "ADC_TAD_MUL_16" 2 593 "0x30"
d G "ADC_TAD_MUL_20" 2 594 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 597 ""
v L "pins" 2 597 "int8" `277 
f B "setup_adc_ports" 2 597 "void(int8 pins)" `276 
f N "setup_adc_ports" 2 598 ""
v L "pins" 2 598 "int8" `279 
v L "reference" 2 598 "int8" `280 
f G "setup_adc_ports" 2 598 "void(int8 pins,int8 reference)" `278 
f N "set_analog_pins" 2 599 ""
v L "pins" 2 599 "int8" `282 
f B "set_analog_pins" 2 599 "void(int8 pins)" `281 
f N "set_analog_pins" 2 600 ""
v L "pins" 2 600 "int8" `284 
v L "reference" 2 600 "int8" `285 
f G "set_analog_pins" 2 600 "void(int8 pins,int8 reference)" `283 
f N "set_adc_channel" 2 601 ""
v L "channel" 2 601 "int8" `287 
f B "set_adc_channel" 2 601 "void(int8 channel)" `286  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 2 604 "0x0F" "None"
d G "ALL_ANALOG" 2 605 "0x00" "A0 A1 A2 A3 A5 F0 F1 F2 F3 F4 F5 F6"
d G "AN0_TO_AN10" 2 606 "0x04" "A0 A1 A2 A3 A5 F0 F1 F2 F3 F4 F5"
d G "AN0_TO_AN9" 2 607 "0x05" "A0 A1 A2 A3 A5 F0 F1 F2 F3 F4"
d G "AN0_TO_AN8" 2 608 "0x06" "A0 A1 A2 A3 A5 F0 F1 F2 F3"
d G "AN0_TO_AN7" 2 609 "0x07" "A0 A1 A2 A3 A5 F0 F1 F2"
d G "AN0_TO_AN6" 2 610 "0x08" "A0 A1 A2 A3 A5 F0 F1"
d G "AN0_TO_AN5" 2 611 "0x09" "A0 A1 A2 A3 A5 F0"
d G "AN0_TO_AN4" 2 612 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 2 613 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 2 614 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 2 615 "0x0D" "A0 A1"
d G "AN0" 2 616 "0x0E" "A0"
d G "ANALOG_AN0_TO_AN10" 2 617 "0x04" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN9" 2 618 "0x05" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN8" 2 619 "0x06" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN7" 2 620 "0x07" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN6" 2 621 "0x08" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN5" 2 622 "0x09" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN4" 2 623 "0x0A" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN3" 2 624 "0x0B" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN2" 2 625 "0x0C" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN1" 2 626 "0x0D" "!old only provided for compatibility"
d G "ANALOG_AN0" 2 627 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 2 630 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 2 631 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 2 632 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 2 633 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 2 636 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 637 "1"
d G "ADC_READ_ONLY" 2 638 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 644 ""
v L "x" 2 644 "sint8" `289 
f B "abs" 2 644 "sint8(sint8 x)" `288 
f N "abs" 2 645 ""
v L "x" 2 645 "sint16" `291 
f G "abs" 2 645 "sint16(sint16 x)" `290 
f N "abs" 2 646 ""
v L "x" 2 646 "sint32" `293 
f G "abs" 2 646 "sint32(sint32 x)" `292 
f N "abs" 2 647 ""
v L "x" 2 647 "float" `295 
f G "abs" 2 647 "float(float x)" `294 
f N "_mul" 2 648 ""
v L "??65535" 2 648 "int8" `297 
v L "??65535" 2 648 "int8" `298 
f B "_mul" 2 648 "int16(int8 ,int8 )" `296 
f N "_mul" 2 649 ""
v L "??65535" 2 649 "sint8" `297 
v L "??65535" 2 649 "sint8" `301 
f G "_mul" 2 649 "sint16(sint8 ,sint8 )" `299 
f N "_mul" 2 650 ""
v L "??65535" 2 650 "int16" `297 
v L "??65535" 2 650 "int16" `304 
f G "_mul" 2 650 "int32(int16 ,int16 )" `302 
f N "_mul" 2 651 ""
v L "??65535" 2 651 "sint16" `297 
v L "??65535" 2 651 "sint16" `307 
f G "_mul" 2 651 "sint32(sint16 ,sint16 )" `305  "Memory Manipulation Prototypes:"
f N "read_bank" 2 654 ""
v L "bank" 2 654 "int8" `309 
v L "offset" 2 654 "int8" `310 
f B "read_bank" 2 654 "int8(int8 bank,int8 offset)" `308 
f N "write_bank" 2 655 ""
v L "bank" 2 655 "int8" `312 
v L "offset" 2 655 "int8" `313 
v L "value" 2 655 "int8" `314 
f B "write_bank" 2 655 "void(int8 bank,int8 offset,int8 value)" `311 
f N "strcpy" 2 656 ""
v L "dest" 2 656 "*int8" `316 
v L "src" 2 656 "*int8" `317 
f B "strcpy" 2 656 "void(*int8 dest,*int8 src)" `315 
f N "memset" 2 657 ""
v L "destination" 2 657 "*int8" `319 
v L "value" 2 657 "int8" `320 
v L "num" 2 657 "int16" `321 
f B "memset" 2 657 "void(*int8 destination,int8 value,int16 num)" `318 
f N "memcpy" 2 658 ""
v L "destination" 2 658 "*int8" `323 
v L "source" 2 658 "*int8" `324 
v L "num" 2 658 "int16" `325 
f B "memcpy" 2 658 "void(*int8 destination,*int8 source,int16 num)" `322  "String Prototypes:"
f N "toupper" 2 661 ""
v L "cvalue" 2 661 "int8" `327 
f B "toupper" 2 661 "int8(int8 cvalue)" `326 
f N "tolower" 2 662 ""
v L "cvalue" 2 662 "int8" `329 
f B "tolower" 2 662 "int8(int8 cvalue)" `328 
f N "sprintf" 2 663 ""
v L "string" 2 663 "*int8" `331 
v L "cstring" 2 663 "*int8" `332 
f B "sprintf" 2 663 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `330  "Data Manipulators Prototypes:"
f N "shift_left" 2 666 ""
v L "address" 2 666 "*int8" `335 
v L "bytes" 2 666 "int8" `336 
v L "value" 2 666 "int8" `337 
f B "shift_left" 2 666 "int8(*int8 address,int8 bytes,int8 value)" `334 
f N "shift_right" 2 667 ""
v L "address" 2 667 "*int8" `339 
v L "bytes" 2 667 "int8" `340 
v L "value" 2 667 "int8" `341 
f B "shift_right" 2 667 "int8(*int8 address,int8 bytes,int8 value)" `338 
f N "rotate_left" 2 668 ""
v L "address" 2 668 "*int8" `343 
v L "bytes" 2 668 "int8" `344 
f B "rotate_left" 2 668 "void(*int8 address,int8 bytes)" `342 
f N "rotate_right" 2 669 ""
v L "address" 2 669 "*int8" `346 
v L "bytes" 2 669 "int8" `347 
f B "rotate_right" 2 669 "void(*int8 address,int8 bytes)" `345 
f N "swap" 2 670 ""
v L "value" 2 670 "int8" `349 
f B "swap" 2 670 "void(int8 value)" `348 
f N "make8" 2 671 ""
v L "var" 2 671 "int16" `351 
v L "offset" 2 671 "int8" `352 
f B "make8" 2 671 "int8(int16 var,int8 offset)" `350 
f N "make8" 2 672 ""
v L "var" 2 672 "int32" `351 
v L "offset" 2 672 "int8" `355 
f G "make8" 2 672 "int8(int32 var,int8 offset)" `353 
f N "make16" 2 673 ""
v L "varhigh" 2 673 "int8" `357 
v L "varlow" 2 673 "int8" `358 
f B "make16" 2 673 "int16(int8 varhigh,int8 varlow)" `356 
f N "make32" 2 674 ""
v L "var1" 2 674 "int16" `360 
f B "make32" 2 674 "int32(int16 var1)" `359 
f N "make32" 2 675 ""
v L "var1" 2 675 "int16" `362 
v L "var2" 2 675 "int16" `363 
f G "make32" 2 675 "int32(int16 var1,int16 var2)" `361 
f N "make32" 2 676 ""
v L "var1" 2 676 "int16" `362 
v L "var2" 2 676 "int8" `366 
f G "make32" 2 676 "int32(int16 var1,int8 var2)" `364 
f N "make32" 2 677 ""
v L "var1" 2 677 "int16" `368 
v L "var2" 2 677 "int8" `369 
v L "var3" 2 677 "int8" `370 
f G "make32" 2 677 "int32(int16 var1,int8 var2,int8 var3)" `367 
f N "make32" 2 678 ""
v L "var1" 2 678 "int8" `372 
f G "make32" 2 678 "int32(int8 var1)" `371 
f N "make32" 2 679 ""
v L "var1" 2 679 "int8" `362 
v L "var2" 2 679 "int8" `375 
f G "make32" 2 679 "int32(int8 var1,int8 var2)" `373 
f N "make32" 2 680 ""
v L "var1" 2 680 "int8" `368 
v L "var2" 2 680 "int8" `369 
v L "var3" 2 680 "int8" `379 
f G "make32" 2 680 "int32(int8 var1,int8 var2,int8 var3)" `376 
f N "make32" 2 681 ""
v L "var1" 2 681 "int8" `381 
v L "var2" 2 681 "int8" `382 
v L "var3" 2 681 "int8" `383 
v L "var4" 2 681 "int8" `384 
f G "make32" 2 681 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `380 
f N "make32" 2 682 ""
v L "var1" 2 682 "int8" `362 
v L "var2" 2 682 "int16" `387 
f G "make32" 2 682 "int32(int8 var1,int16 var2)" `385 
f N "make32" 2 683 ""
v L "var1" 2 683 "int8" `368 
v L "var2" 2 683 "int16" `369 
v L "var3" 2 683 "int8" `391 
f G "make32" 2 683 "int32(int8 var1,int16 var2,int8 var3)" `388 
f N "make32" 2 684 ""
v L "var1" 2 684 "int8" `368 
v L "var2" 2 684 "int8" `369 
v L "var3" 2 684 "int16" `395 
f G "make32" 2 684 "int32(int8 var1,int8 var2,int16 var3)" `392 
f N "bit_set" 2 685 ""
v L "var" 2 685 "int8" `397 
v L "bit" 2 685 "int8" `398 
f B "bit_set" 2 685 "void(int8 var,int8 bit)" `396 
f N "bit_set" 2 686 ""
v L "var" 2 686 "int16" `397 
v L "bit" 2 686 "int8" `401 
f G "bit_set" 2 686 "void(int16 var,int8 bit)" `399 
f N "bit_set" 2 687 ""
v L "var" 2 687 "int32" `397 
v L "bit" 2 687 "int8" `404 
f G "bit_set" 2 687 "void(int32 var,int8 bit)" `402 
f N "bit_clear" 2 688 ""
v L "var" 2 688 "int8" `406 
v L "bit" 2 688 "int8" `407 
f B "bit_clear" 2 688 "void(int8 var,int8 bit)" `405 
f N "bit_clear" 2 689 ""
v L "var" 2 689 "int16" `406 
v L "bit" 2 689 "int8" `410 
f G "bit_clear" 2 689 "void(int16 var,int8 bit)" `408 
f N "bit_clear" 2 690 ""
v L "var" 2 690 "int32" `406 
v L "bit" 2 690 "int8" `413 
f G "bit_clear" 2 690 "void(int32 var,int8 bit)" `411 
f N "bit_test" 2 691 ""
v L "var" 2 691 "int8" `415 
v L "bit" 2 691 "int8" `416 
f B "bit_test" 2 691 "int8(int8 var,int8 bit)" `414 
f N "bit_test" 2 692 ""
v L "var" 2 692 "int16" `415 
v L "bit" 2 692 "int8" `419 
f G "bit_test" 2 692 "int8(int16 var,int8 bit)" `417 
f N "bit_test" 2 693 ""
v L "var" 2 693 "int32" `415 
v L "bit" 2 693 "int8" `422 
f G "bit_test" 2 693 "int8(int32 var,int8 bit)" `420  "#use delay() Prototypes:"
f N "delay_cycles" 2 696 ""
v L "count" 2 696 "int8" `424 
f B "delay_cycles" 2 696 "void(int8 count)" `423 
f N "delay_ms" 2 697 ""
v L "time" 2 697 "int16" `426 
f B "delay_ms" 2 697 "void(int16 time)" `425 
f N "delay_us" 2 698 ""
v L "time" 2 698 "int16" `428 
f B "delay_us" 2 698 "void(int16 time)" `427  "#use rs232() Prototypes:"
f N "putchar" 2 701 ""
v L "cdata" 2 701 "int8" `430 
f B "putchar" 2 701 "void(int8 cdata)" `429 
f N "putchar" 2 702 ""
v L "cdata" 2 702 "int8" `432 
v L "stream" 2 702 "int8" `433 
f G "putchar" 2 702 "void(int8 cdata,int8 stream)" `431 
f N "puts" 2 703 ""
v L "string" 2 703 "*int8" `435 
f B "puts" 2 703 "void(*int8 string)" `434 
f N "puts" 2 704 ""
v L "string" 2 704 "*int8" `437 
v L "stream" 2 704 "int8" `438 
f G "puts" 2 704 "void(*int8 string,int8 stream)" `436 
f N "getch" 2 705 ""
f B "getch" 2 705 "int8()" `439 
f N "getch" 2 706 ""
v L "stream" 2 706 "int8" `441 
f G "getch" 2 706 "int8(int8 stream)" `440 
f N "gets" 2 707 ""
v L "string" 2 707 "*int8" `443 
f B "gets" 2 707 "void(*int8 string)" `442 
f N "gets" 2 708 ""
v L "string" 2 708 "*int8" `445 
v L "stream" 2 708 "int8" `446 
f G "gets" 2 708 "void(*int8 string,int8 stream)" `444 
f N "kbhit" 2 709 ""
f B "kbhit" 2 709 "int8()" `447 
f N "kbhit" 2 710 ""
v L "stream" 2 710 "int8" `449 
f G "kbhit" 2 710 "int8(int8 stream)" `448 
f N "printf" 2 711 ""
v L "string" 2 711 "*int8" `451 
f B "printf" 2 711 "void(*int8 string,*int8 _VA_LIST)" `450 
f N "fprintf" 2 712 ""
v L "stream" 2 712 "int8" `454 
v L "string" 2 712 "*int8" `455 
f B "fprintf" 2 712 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `453 
f N "putc_send" 2 713 ""
f B "putc_send" 2 713 "void()" `457 
f N "fputc_send" 2 714 ""
v L "stream" 2 714 "int8" `459 
f B "fputc_send" 2 714 "void(int8 stream)" `458 
f N "rcv_buffer_full" 2 715 ""
f B "rcv_buffer_full" 2 715 "int8()" `460 
f N "rcv_buffer_full" 2 716 ""
v L "stream" 2 716 "int8" `462 
f G "rcv_buffer_full" 2 716 "int8(int8 stream)" `461 
f N "rcv_buffer_bytes" 2 717 ""
f B "rcv_buffer_bytes" 2 717 "int16()" `463 
f N "rcv_buffer_bytes" 2 718 ""
v L "stream" 2 718 "int8" `465 
f G "rcv_buffer_bytes" 2 718 "int16(int8 stream)" `464 
f N "tx_buffer_full" 2 719 ""
f B "tx_buffer_full" 2 719 "int8()" `466 
f N "tx_buffer_full" 2 720 ""
v L "stream" 2 720 "int8" `468 
f G "tx_buffer_full" 2 720 "int8(int8 stream)" `467 
f N "tx_buffer_bytes" 2 721 ""
f B "tx_buffer_bytes" 2 721 "int16()" `469 
f N "tx_buffer_bytes" 2 722 ""
v L "stream" 2 722 "int8" `471 
f G "tx_buffer_bytes" 2 722 "int16(int8 stream)" `470  "#use i2c() Prototypes:"
f N "i2c_read" 2 725 ""
f B "i2c_read" 2 725 "int8()" `472 
f N "i2c_read" 2 726 ""
v L "stream" 2 726 "int8" `474 
f G "i2c_read" 2 726 "int8(int8 stream)" `473 
f N "i2c_read" 2 727 ""
v L "stream" 2 727 "int8" `476 
v L "ack" 2 727 "int8" `477 
f G "i2c_read" 2 727 "int8(int8 stream,int8 ack)" `475 
f N "i2c_write" 2 728 ""
v L "data" 2 728 "int8" `479 
f B "i2c_write" 2 728 "int8(int8 data)" `478 
f N "i2c_write" 2 729 ""
v L "stream" 2 729 "int8" `481 
v L "data" 2 729 "int8" `482 
f G "i2c_write" 2 729 "int8(int8 stream,int8 data)" `480 
f N "i2c_start" 2 730 ""
f B "i2c_start" 2 730 "void()" `483 
f N "i2c_start" 2 731 ""
v L "stream" 2 731 "int8" `485 
f G "i2c_start" 2 731 "void(int8 stream)" `484 
f N "i2c_start" 2 732 ""
v L "stream" 2 732 "int8" `487 
v L "restart" 2 732 "int8" `488 
f G "i2c_start" 2 732 "void(int8 stream,int8 restart)" `486 
f N "i2c_stop" 2 733 ""
f B "i2c_stop" 2 733 "void()" `489 
f N "i2c_stop" 2 734 ""
v L "stream" 2 734 "int8" `491 
f G "i2c_stop" 2 734 "void(int8 stream)" `490 
f N "i2c_isr_state" 2 735 ""
f B "i2c_isr_state" 2 735 "int8()" `492 
f N "i2c_slaveaddr" 2 736 ""
v L "addr" 2 736 "int8" `494 
f B "i2c_slaveaddr" 2 736 "void(int8 addr)" `493 
f N "i2c_slaveaddr" 2 737 ""
v L "stream" 2 737 "int8" `496 
v L "addr" 2 737 "int8" `497 
f G "i2c_slaveaddr" 2 737 "void(int8 stream,int8 addr)" `495 
f N "i2c_poll" 2 738 ""
f B "i2c_poll" 2 738 "int8()" `498 
f N "i2c_poll" 2 739 ""
v L "stream" 2 739 "int8" `500 
f G "i2c_poll" 2 739 "int8(int8 stream)" `499 
f N "i2c_init" 2 740 ""
v L "baud" 2 740 "int32" `502 
f B "i2c_init" 2 740 "void(int32 baud)" `501 
f N "i2c_init" 2 741 ""
v L "stream" 2 741 "int8" `504 
v L "baud" 2 741 "int32" `505 
f G "i2c_init" 2 741 "void(int8 stream,int32 baud)" `503  "#use spi() Prototypes:"
f N "spi_xfer" 2 744 ""
f B "spi_xfer" 2 744 "int8()" `506 
f N "spi_xfer" 2 745 ""
f G "spi_xfer" 2 745 "int16()" `507 
f N "spi_xfer" 2 746 ""
f G "spi_xfer" 2 746 "int32()" `508 
f N "spi_xfer" 2 747 ""
v L "data" 2 747 "int8" `510 
f G "spi_xfer" 2 747 "int8(int8 data)" `509 
f N "spi_xfer" 2 748 ""
v L "data" 2 748 "int16" `512 
f G "spi_xfer" 2 748 "int16(int16 data)" `511 
f N "spi_xfer" 2 749 ""
v L "data" 2 749 "int32" `514 
f G "spi_xfer" 2 749 "int32(int32 data)" `513 
f N "spi_xfer" 2 750 ""
v L "stream" 2 750 "int8" `516 
v L "data" 2 750 "int8" `517 
f G "spi_xfer" 2 750 "int8(int8 stream,int8 data)" `515 
f N "spi_xfer" 2 751 ""
v L "stream" 2 751 "int8" `516 
v L "data" 2 751 "int16" `520 
f G "spi_xfer" 2 751 "int16(int8 stream,int16 data)" `518 
f N "spi_xfer" 2 752 ""
v L "stream" 2 752 "int8" `516 
v L "data" 2 752 "int32" `523 
f G "spi_xfer" 2 752 "int32(int8 stream,int32 data)" `521 
f N "spi_xfer" 2 753 ""
v L "stream" 2 753 "int8" `525 
v L "data" 2 753 "int8" `526 
v L "bits" 2 753 "int8" `527 
f G "spi_xfer" 2 753 "int8(int8 stream,int8 data,int8 bits)" `524 
f N "spi_xfer" 2 754 ""
v L "stream" 2 754 "int8" `525 
v L "data" 2 754 "int16" `526 
v L "bits" 2 754 "int8" `531 
f G "spi_xfer" 2 754 "int16(int8 stream,int16 data,int8 bits)" `528 
f N "spi_xfer" 2 755 ""
v L "stream" 2 755 "int8" `525 
v L "data" 2 755 "int32" `526 
v L "bits" 2 755 "int8" `535 
f G "spi_xfer" 2 755 "int32(int8 stream,int32 data,int8 bits)" `532 
f N "spi_init" 2 756 ""
v L "baud" 2 756 "int32" `537 
f B "spi_init" 2 756 "void(int32 baud)" `536 
f N "spi_init" 2 757 ""
v L "stream" 2 757 "int8" `539 
v L "baud" 2 757 "int32" `540 
f G "spi_init" 2 757 "void(int8 stream,int32 baud)" `538 
f N "spi_speed" 2 758 ""
v L "baud" 2 758 "int32" `542 
f B "spi_speed" 2 758 "void(int32 baud)" `541 
f N "spi_speed" 2 759 ""
v L "stream" 2 759 "int8" `544 
v L "baud" 2 759 "int32" `545 
f G "spi_speed" 2 759 "void(int8 stream,int32 baud)" `543 
f N "spi_speed" 2 760 ""
v L "stream" 2 760 "int8" `547 
v L "baud" 2 760 "int32" `548 
v L "clock" 2 760 "int32" `549 
f G "spi_speed" 2 760 "void(int8 stream,int32 baud,int32 clock)" `546 
f N "spi_prewrite" 2 761 ""
v L "data" 2 761 "int8" `551 
f B "spi_prewrite" 2 761 "void(int8 data)" `550 
f N "spi_prewrite" 2 762 ""
v L "data" 2 762 "int16" `553 
f G "spi_prewrite" 2 762 "void(int16 data)" `552 
f N "spi_prewrite" 2 763 ""
v L "data" 2 763 "int32" `555 
f G "spi_prewrite" 2 763 "void(int32 data)" `554 
f N "spi_prewrite" 2 764 ""
v L "??65535" 2 764 "int8" `557 
v L "data" 2 764 "int8" `558 
f G "spi_prewrite" 2 764 "void(int8 ,int8 data)" `556 
f N "spi_prewrite" 2 765 ""
v L "??65535" 2 765 "int8" `557 
v L "data" 2 765 "int16" `561 
f G "spi_prewrite" 2 765 "void(int8 ,int16 data)" `559 
f N "spi_prewrite" 2 766 ""
v L "??65535" 2 766 "int8" `557 
v L "data" 2 766 "int32" `564 
f G "spi_prewrite" 2 766 "void(int8 ,int32 data)" `562 
f N "spi_xfer_in" 2 767 ""
f B "spi_xfer_in" 2 767 "int8()" `565 
f N "spi_xfer_in" 2 768 ""
f G "spi_xfer_in" 2 768 "int16()" `566 
f N "spi_xfer_in" 2 769 ""
f G "spi_xfer_in" 2 769 "int32()" `567 
f N "spi_xfer_in" 2 770 ""
v L "bits" 2 770 "int8" `569 
f G "spi_xfer_in" 2 770 "int8(int8 bits)" `568 
f N "spi_xfer_in" 2 771 ""
v L "bits" 2 771 "int8" `571 
f G "spi_xfer_in" 2 771 "int16(int8 bits)" `570 
f N "spi_xfer_in" 2 772 ""
v L "bits" 2 772 "int8" `573 
f G "spi_xfer_in" 2 772 "int32(int8 bits)" `572 
f N "spi_xfer_in" 2 773 ""
v L "stream" 2 773 "int8" `575 
v L "bits" 2 773 "int8" `576 
f G "spi_xfer_in" 2 773 "int8(int8 stream,int8 bits)" `574 
f N "spi_xfer_in" 2 774 ""
v L "stream" 2 774 "int8" `575 
v L "bits" 2 774 "int8" `579 
f G "spi_xfer_in" 2 774 "int16(int8 stream,int8 bits)" `577 
f N "spi_xfer_in" 2 775 ""
v L "stream" 2 775 "int8" `575 
v L "bits" 2 775 "int8" `582 
f G "spi_xfer_in" 2 775 "int32(int8 stream,int8 bits)" `580  "#use rtos() Prototypes:"
f N "rtos_run" 2 778 ""
f B "rtos_run" 2 778 "void()" `583 
f N "rtos_yield" 2 779 ""
f B "rtos_yield" 2 779 "void()" `584 
f N "rtos_enable" 2 780 ""
v L "task" 2 780 "int8" `586 
f B "rtos_enable" 2 780 "void(int8 task)" `585 
f N "rtos_disable" 2 781 ""
v L "task" 2 781 "int8" `588 
f B "rtos_disable" 2 781 "void(int8 task)" `587 
f N "rtos_terminate" 2 782 ""
f B "rtos_terminate" 2 782 "void()" `589 
f N "rtos_await" 2 783 ""
v L "flag" 2 783 "int8" `591 
f B "rtos_await" 2 783 "void(int8 flag)" `590 
f N "rtos_wait" 2 784 ""
v L "sem" 2 784 "int8" `593 
f B "rtos_wait" 2 784 "void(int8 sem)" `592 
f N "rtos_signal" 2 785 ""
v L "sem" 2 785 "int8" `595 
f B "rtos_signal" 2 785 "void(int8 sem)" `594 
f N "rtos_msg_send" 2 786 ""
v L "task" 2 786 "int8" `597 
v L "msg" 2 786 "int8" `598 
f B "rtos_msg_send" 2 786 "void(int8 task,int8 msg)" `596 
f N "rtos_msg_read" 2 787 ""
f B "rtos_msg_read" 2 787 "int8()" `599 
f N "rtos_msg_poll" 2 788 ""
f B "rtos_msg_poll" 2 788 "int8()" `600 
f N "rtos_overrun" 2 789 ""
v L "task" 2 789 "int8" `602 
f B "rtos_overrun" 2 789 "int8(int8 task)" `601 
f N "rtos_stats" 2 790 ""
v L "task" 2 790 "int8" `604 
v L "stat" 2 790 "*int8" `605 
f B "rtos_stats" 2 790 "void(int8 task,*int8 stat)" `603  "#use timer() Prototypes:"
f N "get_ticks" 2 793 ""
f B "get_ticks" 2 793 "int8()" `606 
f N "get_ticks" 2 794 ""
f G "get_ticks" 2 794 "int16()" `607 
f N "get_ticks" 2 795 ""
f G "get_ticks" 2 795 "int32()" `608 
f N "get_ticks" 2 796 ""
v L "stream" 2 796 "int8" `610 
f G "get_ticks" 2 796 "int8(int8 stream)" `609 
f N "get_ticks" 2 797 ""
v L "stream" 2 797 "int8" `612 
f G "get_ticks" 2 797 "int16(int8 stream)" `611 
f N "get_ticks" 2 798 ""
v L "stream" 2 798 "int8" `614 
f G "get_ticks" 2 798 "int32(int8 stream)" `613 
f N "set_ticks" 2 799 ""
v L "value" 2 799 "int8" `616 
f B "set_ticks" 2 799 "void(int8 value)" `615 
f N "set_ticks" 2 800 ""
v L "value" 2 800 "int16" `618 
f G "set_ticks" 2 800 "void(int16 value)" `617 
f N "set_ticks" 2 801 ""
v L "value" 2 801 "int32" `620 
f G "set_ticks" 2 801 "void(int32 value)" `619 
f N "set_ticks" 2 802 ""
v L "stream" 2 802 "int8" `622 
v L "value" 2 802 "int8" `623 
f G "set_ticks" 2 802 "void(int8 stream,int8 value)" `621 
f N "set_ticks" 2 803 ""
v L "stream" 2 803 "int8" `622 
v L "value" 2 803 "int16" `626 
f G "set_ticks" 2 803 "void(int8 stream,int16 value)" `624 
f N "set_ticks" 2 804 ""
v L "stream" 2 804 "int8" `622 
v L "value" 2 804 "int32" `629 
f G "set_ticks" 2 804 "void(int8 stream,int32 value)" `627  "#use pwm() Prototypes:"
f N "pwm_on" 2 807 ""
f B "pwm_on" 2 807 "void()" `630 
f N "pwm_on" 2 808 ""
v L "stream" 2 808 "int8" `632 
f G "pwm_on" 2 808 "void(int8 stream)" `631 
f N "pwm_off" 2 809 ""
f B "pwm_off" 2 809 "void()" `633 
f N "pwm_off" 2 810 ""
v L "stream" 2 810 "int8" `635 
f G "pwm_off" 2 810 "void(int8 stream)" `634 
f N "pwm_set_duty" 2 811 ""
v L "duty" 2 811 "int16" `637 
f B "pwm_set_duty" 2 811 "void(int16 duty)" `636 
f N "pwm_set_duty" 2 812 ""
v L "stream" 2 812 "int8" `639 
v L "duty" 2 812 "int16" `640 
f G "pwm_set_duty" 2 812 "void(int8 stream,int16 duty)" `638 
f N "pwm_set_duty_percent" 2 813 ""
v L "percent" 2 813 "int16" `642 
f B "pwm_set_duty_percent" 2 813 "void(int16 percent)" `641 
f N "pwm_set_duty_percent" 2 814 ""
v L "stream" 2 814 "int8" `644 
v L "percent" 2 814 "int16" `645 
f G "pwm_set_duty_percent" 2 814 "void(int8 stream,int16 percent)" `643 
f N "pwm_set_frequency" 2 815 ""
v L "frequency" 2 815 "int32" `647 
f B "pwm_set_frequency" 2 815 "void(int32 frequency)" `646 
f N "pwm_set_frequency" 2 816 ""
v L "stream" 2 816 "int8" `649 
v L "frequency" 2 816 "int32" `650 
f G "pwm_set_frequency" 2 816 "void(int8 stream,int32 frequency)" `648  "#use capture() Prototypes:"
f N "get_capture_time" 2 819 ""
f B "get_capture_time" 2 819 "int16()" `651 
f N "get_capture_time" 2 820 ""
v L "stream" 2 820 "int8" `653 
f G "get_capture_time" 2 820 "int16(int8 stream)" `652 
f N "get_capture_event" 2 821 ""
f B "get_capture_event" 2 821 "int8()" `654 
f N "get_capture_event" 2 822 ""
v L "stream" 2 822 "int8" `656 
f G "get_capture_event" 2 822 "int8(int8 stream)" `655  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 835 ""
v L "address" 2 835 "int32" `658 
f B "goto_address" 2 835 "void(int32 address)" `657 
f N "label_address" 2 836 ""
v L "label" 2 836 "int32" `660 
f B "label_address" 2 836 "int32(int32 label)" `659  "Program Memory Prototypes:"
f N "read_program_memory" 2 839 ""
v L "address" 2 839 "int32" `662 
v L "dataptr" 2 839 "*int8" `663 
v L "count" 2 839 "int16" `664 
f B "read_program_memory" 2 839 "void(int32 address,*int8 dataptr,int16 count)" `661 
f N "read_program_eeprom" 2 840 ""
v L "address" 2 840 "int32" `666 
f B "read_program_eeprom" 2 840 "int16(int32 address)" `665 
f N "write_program_memory" 2 841 ""
v L "address" 2 841 "int32" `668 
v L "dataptr" 2 841 "*int8" `669 
v L "count" 2 841 "int16" `670 
f B "write_program_memory" 2 841 "void(int32 address,*int8 dataptr,int16 count)" `667 
f N "write_program_eeprom" 2 842 ""
v L "address" 2 842 "int32" `672 
v L "data" 2 842 "int16" `673 
f B "write_program_eeprom" 2 842 "void(int32 address,int16 data)" `671  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 847 "int16" `674 
f N "read_eeprom" 2 852 ""
v L "address" 2 852 "__EEADDRESS__" `676 
f B "read_eeprom" 2 852 "int8(__EEADDRESS__ address)" `675 
f N "write_eeprom" 2 853 ""
v L "address" 2 853 "__EEADDRESS__" `678 
v L "value" 2 853 "int8" `679 
f B "write_eeprom" 2 853 "void(__EEADDRESS__ address,int8 value)" `677  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 860 ""
v L "interrupt" 2 860 "int32" `681 
f B "enable_interrupts" 2 860 "void(int32 interrupt)" `680 
f N "disable_interrupts" 2 861 ""
v L "interrupt" 2 861 "int32" `683 
f B "disable_interrupts" 2 861 "void(int32 interrupt)" `682 
f N "clear_interrupt" 2 862 ""
v L "interrupt" 2 862 "int32" `685 
f B "clear_interrupt" 2 862 "void(int32 interrupt)" `684 
f N "interrupt_active" 2 863 ""
v L "interrupt" 2 863 "int32" `687 
f B "interrupt_active" 2 863 "int8(int32 interrupt)" `686 
f N "interrupt_enabled" 2 864 ""
v L "interrupt" 2 864 "int32" `689 
f B "interrupt_enabled" 2 864 "int8(int32 interrupt)" `688 
f N "ext_int_edge" 2 865 ""
v L "source" 2 865 "int8" `691 
v L "edge" 2 865 "int8" `692 
f B "ext_int_edge" 2 865 "void(int8 source,int8 edge)" `690 
f N "jump_to_isr" 2 866 ""
v L "address" 2 866 "int16" `694 
f B "jump_to_isr" 2 866 "void(int16 address)" `693  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 868 "0x40"
d G "H_TO_L" 2 869 "0"
d G "GLOBAL" 2 871 "0xF2C0"
d G "PERIPH" 2 872 "0xF240"
d G "INT_RTCC" 2 873 "0x00F220"
d G "INT_TIMER0" 2 874 "0x00F220"
d G "INT_TIMER1" 2 875 "0x009D01"
d G "INT_TIMER2" 2 876 "0x009D02"
d G "INT_TIMER3" 2 877 "0x00A002"
d G "INT_EXT_L2H" 2 878 "0x5000F210"
d G "INT_EXT_H2L" 2 879 "0x6000F210"
d G "INT_EXT" 2 880 "0x00F210"
d G "INT_EXT1_L2H" 2 881 "0x5001F008"
d G "INT_EXT1_H2L" 2 882 "0x6001F008"
d G "INT_EXT1" 2 883 "0x00F008"
d G "INT_EXT2_L2H" 2 884 "0x5002F010"
d G "INT_EXT2_H2L" 2 885 "0x6002F010"
d G "INT_EXT2" 2 886 "0x00F010"
d G "INT_RB" 2 887 "0x00FFF208"
d G "INT_PSP" 2 888 "0x009D80"
d G "INT_AD" 2 889 "0x009D40"
d G "INT_RDA" 2 890 "0x009D20"
d G "INT_TBE" 2 891 "0x009D10"
d G "INT_SSP" 2 892 "0x009D08"
d G "INT_CCP1" 2 893 "0x009D04"
d G "INT_CCP2" 2 894 "0x00A001"
d G "INT_BUSCOL" 2 895 "0x00A008"
d G "INT_LOWVOLT" 2 896 "0x00A004"
d G "INT_COMP" 2 897 "0x00A040"
d G "INT_EEPROM" 2 898 "0x00A010"
d G "INT_RDA2" 2 899 "0x00A320"
d G "INT_TBE2" 2 900 "0x00A310"
d G "INT_TIMER4" 2 901 "0x00A308"
d G "INT_CCP3" 2 902 "0x00A301"
d G "INT_CCP4" 2 903 "0x00A302"
d G "INT_CCP5" 2 904 "0x00A304"
d G "INT_OSCF" 2 905 "0x00A080"
d G "INT_BUSCOL2" 2 906 "0x00A340"
d G "INT_SSP2" 2 907 "0x00A380"
d G "INT_EXT3_L2H" 2 908 "0x5003F020"
d G "INT_EXT3_H2L" 2 909 "0x6003F020"
d G "INT_EXT3" 2 910 "0x00F020"
D G "BUZZ_ON" 1 14 "output_high(PIN_C5)"
D G "BUZZ_OFF" 1 15 "output_low(PIN_C5)"
D G "ALARM_ON" 1 16 "output_low(PIN_C0)"
D G "ALARM_OFF" 1 17 "output_high(PIN_C0)"
D G "SDI" 1 18 "PIN_D7"
D G "SFT" 1 19 "PIN_D5"
D G "LCH" 1 20 "PIN_D6"
D G "MATH_H" 3 30 ""
D G "PI" 3 35 "3.1415926535897932"
D G "SQRT2" 3 38 "1.4142135623730950"
C L "jump_to_isr" 3 2 3 "FUNCTION"
F N "CEIL_FLOOR" 3 45 ""
V L "x" 3 45 "float" `716 
V L "n" 3 45 "int8" `717 
F G "CEIL_FLOOR" 3 46 "float(float x,int8 n)" `715 
V L "y" 3 47 "float" `718 
V L "res" 3 47 "float" `719 
V L "l" 3 48 "int16" `720 
V L "s" 3 49 "int1" `721 
C L "floor" 3 2 5 "FUNCTION"
F N "floor" 3 207 ""
V L "x" 3 207 "float" `736 
F G "floor" 3 208 "float(float x)" `735 
C L "ceil" 3 2 5 "FUNCTION"
F N "ceil" 3 233 ""
V L "x" 3 233 "float" `738 
F G "ceil" 3 234 "float(float x)" `737 
D G "fabs" 3 259 "abs"
C L "fmod" 3 2 6 "FUNCTION"
F N "fmod" 3 271 ""
V L "x" 3 271 "float" `740 
V L "y" 3 271 "float" `741 
F G "fmod" 3 272 "float(float x,float y)" `739 
V L "i" 3 273 "float" `742 
D G "LN2" 3 334 "0.6931471805599453"
D G "LN2_INV" 3 335 "1.4426950408889634073"
V G "pe" 3 337 "[6]" `747 
F N "exp" 3 341 ""
V L "x" 3 341 "float" `750 
F G "exp" 3 342 "float(float x)" `749 
V L "y" 3 343 "float" `751 
V L "res" 3 343 "float" `752 
V L "r" 3 343 "float" `753 
V L "n" 3 347 "sint8" `754 
V L "s" 3 348 "int1" `755 
C L "exp" 3 2 1 "FUNCTION"
V G "pl" 3 525 "[4]" `759 
V G "ql" 3 526 "[4]" `762 
C L "log" 3 2 3 "FUNCTION"
F N "log" 3 534 ""
V L "x" 3 534 "float" `765 
F G "log" 3 535 "float(float x)" `764 
V L "y" 3 536 "float" `766 
V L "res" 3 536 "float" `767 
V L "r" 3 536 "float" `768 
V L "y2" 3 536 "float" `769 
V L "n" 3 540 "sint8" `770 
C L "log" 3 2 1 "FUNCTION"
D G "LN10" 3 758 "2.3025850929940456"
D G "LN10_INV" 3 759 "0.4342944819032518276"
C L "log10" 3 2 3 "FUNCTION"
F N "log10" 3 767 ""
V L "x" 3 767 "float" `772 
F G "log10" 3 768 "float(float x)" `771 
V L "r" 3 769 "float" `773 
C L "modf" 3 2 8 "FUNCTION"
F N "modf" 3 808 ""
V L "value" 3 808 "float" `775 
V L "iptr" 3 808 "*float" `776 
F G "modf" 3 809 "float(float value,*float iptr)" `774 
C L "pwr" 3 2 6 "FUNCTION"
F N "pwr" 3 836 ""
V L "x" 3 836 "float" `778 
V L "y" 3 836 "float" `779 
F G "pwr" 3 837 "float(float x,float y)" `777 
C L "pow" 3 2 7 "FUNCTION"
F N "pow" 3 899 ""
V L "x" 3 899 "float" `781 
V L "y" 3 899 "float" `782 
F G "pow" 3 900 "float(float x,float y)" `780 
C L "sqrt" 3 2 5 "FUNCTION"
F N "sqrt" 3 960 ""
V L "x" 3 960 "float" `784 
F G "sqrt" 3 961 "float(float x)" `783 
V L "y" 3 962 "float" `785 
V L "res" 3 962 "float" `786 
V L "p" 3 966 "*int8" `787 
D G "PI_DIV_BY_TWO_INV" 3 1155 "0.63661977236758134"
D G "PI_DIV_BY_TWO" 3 1159 "1.5707963267948966"
D G "TWOBYPI" 3 1163 "0.6366197723675813"
C L "cos" 3 2 3 "FUNCTION"
F N "cos" 3 1171 ""
V L "x" 3 1171 "float" `789 
F G "cos" 3 1172 "float(float x)" `788 
V L "y" 3 1173 "float" `790 
V L "t" 3 1173 "float" `791 
V L "t2" 3 1173 "float" `792 
V L "quad" 3 1174 "int8" `793 
V L "i" 3 1174 "int8" `794 
V L "frac" 3 1175 "float" `795 
V L "p" 3 1176 "float[5]" `796  "by the series definition for cosine"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 2 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "sin" 3 2 5 "FUNCTION"
F N "sin" 3 1310 ""
V L "x" 3 1310 "float" `798 
F G "sin" 3 1311 "float(float x)" `797 
C L "tan" 3 2 5 "FUNCTION"
F N "tan" 3 1336 ""
V L "x" 3 1336 "float" `800 
F G "tan" 3 1337 "float(float x)" `799 
V L "c" 3 1338 "float" `801 
V L "s" 3 1338 "float" `802 
V G "pas" 3 1376 "[3]" `804 
V G "qas" 3 1377 "[3]" `807 
F N "ASIN_COS" 3 1379 ""
V L "x" 3 1379 "float" `810 
V L "n" 3 1379 "int8" `811 
F G "ASIN_COS" 3 1380 "float(float x,int8 n)" `809 
V L "y" 3 1381 "float" `812 
V L "res" 3 1381 "float" `813 
V L "r" 3 1381 "float" `814 
V L "y2" 3 1381 "float" `815 
V L "s" 3 1382 "int1" `816 
C L "ASIN_COS" 3 2 1 "FUNCTION"
C L "ASIN_COS" 3 2 1 "FUNCTION"
C L "asin" 3 2 5 "FUNCTION"
F N "asin" 3 1537 ""
V L "x" 3 1537 "float" `818 
F G "asin" 3 1538 "float(float x)" `817 
V L "r" 3 1539 "float" `819 
C L "acos" 3 2 5 "FUNCTION"
F N "acos" 3 1571 ""
V L "x" 3 1571 "float" `821 
F G "acos" 3 1572 "float(float x)" `820 
V L "r" 3 1573 "float" `822 
V G "pat" 3 1599 "[4]" `824 
V G "qat" 3 1600 "[4]" `827 
C L "atan" 3 2 3 "FUNCTION"
F N "atan" 3 1608 ""
V L "x" 3 1608 "float" `830 
F G "atan" 3 1609 "float(float x)" `829 
V L "y" 3 1610 "float" `831 
V L "res" 3 1610 "float" `832 
V L "r" 3 1610 "float" `833 
V L "s" 3 1611 "int1" `834 
V L "flag" 3 1611 "int1" `835 
C L "atan" 3 2 1 "FUNCTION"
C L "atan2" 3 2 7 "FUNCTION"
F N "atan2" 3 1751 ""
V L "y" 3 1751 "float" `837 
V L "x" 3 1751 "float" `838 
F G "atan2" 3 1752 "float(float y,float x)" `836 
V L "z" 3 1753 "float" `839 
V L "sign" 3 1754 "int1" `840 
V L "quad" 3 1755 "int8" `841 
C L "atan2" 3 2 1 "FUNCTION"
C L "atan2" 3 2 1 "FUNCTION"
C L "cosh" 3 2 7 "FUNCTION"
F N "cosh" 3 1973 ""
V L "x" 3 1973 "float" `844 
F G "cosh" 3 1974 "float(float x)" `843 
C L "sinh" 3 2 6 "FUNCTION"
F N "sinh" 3 2000 ""
V L "x" 3 2000 "float" `846 
F G "sinh" 3 2001 "float(float x)" `845 
C L "tanh" 3 2 6 "FUNCTION"
F N "tanh" 3 2030 ""
V L "x" 3 2030 "float" `848 
F G "tanh" 3 2031 "float(float x)" `847 
D G "LOG2" 3 2060 ".30102999566398119521"
D G "LOG2_INV" 3 2061 "3.32192809488736234787"
F N "frexp" 3 2062 ""
V L "x" 3 2062 "float" `850 
V L "exp" 3 2062 "*sint8" `851 
F G "frexp" 3 2063 "float(float x,*sint8 exp)" `849 
V L "res" 3 2064 "float" `852 
V L "sign" 3 2065 "int1" `853 
C L "ldexp" 3 2 6 "FUNCTION"
F N "ldexp" 3 2207 ""
V L "value" 3 2207 "float" `855 
V L "exp" 3 2207 "sint8" `856 
F G "ldexp" 3 2208 "float(float value,sint8 exp)" `854 
V G "data_metter" 1 22 "int8[200]" `857 
V G "crc_high" 1 22 "int8" `858 
V G "crc_low" 1 22 "int8" `859 
V G "time_key" 1 22 "int8" `860 
V G "tack" 1 22 "int8" `861 
V G "day" 1 22 "int8" `862 
V G "month" 1 22 "int8" `863 
V G "year" 1 22 "int8" `864 
V G "hour" 1 22 "int8" `865 
V G "min" 1 22 "int8" `866 
V G "dow" 1 22 "int8" `867 
V G "sec" 1 22 "int8" `868 
V G "tack_1s" 1 22 "int8" `869 
V G "addr" 1 22 "int8" `870 
V G "count" 1 22 "int8" `871 
V G "i" 1 22 "int8" `872 
V G "ip1" 1 22 "int8" `873 
V G "ip2" 1 22 "int8" `874 
V G "ip3" 1 22 "int8" `875 
V G "ip4" 1 22 "int8" `876 
V G "count_alarm" 1 22 "int8" `877 
V G "crc16" 1 23 "int16" `878 
V G "port" 1 23 "int16" `879 
V G "input1" 1 23 "int16" `880 
V G "output" 1 23 "int16" `881 
V G "lo" 1 23 "int16[21]" `882 
V G "lcd_en" 1 24 "int1" `883 
V G "alarm" 1 24 "int1[26]" `884 
V G "ready" 1 24 "int1" `885 
V G "out_alarm" 1 24 "int1" `886 
V G "i1" 1 25 "float" `887 
V G "i2" 1 25 "float" `888 
V G "i3" 1 25 "float" `889 
V G "u1" 1 25 "float" `890 
V G "u2" 1 25 "float" `891 
V G "u3" 1 25 "float" `892 
V G "cos1" 1 25 "float" `893 
V G "cos2" 1 25 "float" `894 
V G "cos3" 1 25 "float" `895 
V G "p" 1 25 "float" `896 
V G "q" 1 25 "float" `897 
V G "p1" 1 25 "float" `898 
V G "p2" 1 25 "float" `899 
V G "p3" 1 25 "float" `900 
V G "q1" 1 25 "float" `901 
V G "q2" 1 25 "float" `902 
V G "q3" 1 25 "float" `903 
V G "f" 1 26 "int8" `904 
V G "gfilename" 1 26 "int8[20]" `905 
V G "msg" 1 26 "int8[200]" `906 
E G "monitor" 1 27 "0" `908 
E G "state_alarm" 1 27 "1" `909 
E G "add_ip" 1 27 "2" `910 
E G "date" 1 27 "3" `911 
E G "metter1" 1 27 "4" `912 
E G "metter2" 1 27 "5" `913 
E G "metter3" 1 27 "6" `914 
E G "metter4" 1 27 "7" `915 
E G "metter5" 1 27 "8" `916 
E G "metter6" 1 27 "9" `917 
E G "metter7" 1 27 "10" `918 
E G "metter8" 1 28 "11" `919 
E G "metter9" 1 28 "12" `920 
E G "metter10" 1 28 "13" `921 
E G "metter11" 1 28 "14" `922 
E G "metter12" 1 28 "15" `923 
E G "metter13" 1 28 "16" `924 
E G "metter14" 1 28 "17" `925 
E G "metter15" 1 28 "18" `926 
E G "metter16" 1 28 "19" `927 
E G "metter17" 1 28 "20" `928 
E G "metter18" 1 28 "21" `929 
E G "metter19" 1 28 "22" `930 
E G "metter20" 1 29 "23" `931 
E G "metter21" 1 29 "24" `932 
E G "metter22" 1 29 "25" `933 
E G "metter23" 1 29 "26" `934 
E G "metter24" 1 29 "27" `935 
E G "metter25" 1 29 "28" `936 
E G "metter26" 1 30 "29" `937 
E G "metter1_action" 1 30 "30" `938 
E G "metter1_type" 1 30 "31" `939 
E G "metter2_action" 1 30 "32" `940 
E G "metter2_type" 1 30 "33" `941 
E G "metter3_action" 1 30 "34" `942 
E G "metter3_type" 1 31 "35" `943 
E G "metter4_action" 1 31 "36" `944 
E G "metter4_type" 1 31 "37" `945 
E G "metter5_action" 1 31 "38" `946 
E G "metter5_type" 1 31 "39" `947 
E G "metter6_action" 1 31 "40" `948 
E G "metter6_type" 1 32 "41" `949 
E G "metter7_action" 1 32 "42" `950 
E G "metter7_type" 1 32 "43" `951 
E G "metter8_action" 1 32 "44" `952 
E G "metter8_type" 1 32 "45" `953 
E G "metter9_action" 1 32 "46" `954 
E G "metter9_type" 1 33 "47" `955 
E G "metter10_action" 1 33 "48" `956 
E G "metter10_type" 1 33 "49" `957 
E G "metter11_action" 1 33 "50" `958 
E G "metter11_type" 1 33 "51" `959 
E G "metter12_action" 1 33 "52" `960 
E G "metter12_type" 1 34 "53" `961 
E G "metter13_action" 1 34 "54" `962 
E G "metter13_type" 1 34 "55" `963 
E G "metter14_action" 1 34 "56" `964 
E G "metter14_type" 1 34 "57" `965 
E G "metter15_action" 1 34 "58" `966 
E G "metter15_type" 1 35 "59" `967 
E G "metter16_action" 1 35 "60" `968 
E G "metter16_type" 1 35 "61" `969 
E G "metter17_action" 1 35 "62" `970 
E G "metter17_type" 1 35 "63" `971 
E G "metter18_action" 1 35 "64" `972 
E G "metter18_type" 1 35 "65" `973 
E G "metter19_action" 1 35 "66" `974 
E G "metter19_type" 1 35 "67" `975 
E G "metter20_action" 1 35 "68" `976 
E G "metter20_type" 1 36 "69" `977 
E G "metter21_action" 1 36 "70" `978 
E G "metter21_type" 1 36 "71" `979 
E G "metter22_action" 1 36 "72" `980 
E G "metter22_type" 1 36 "73" `981 
E G "metter23_action" 1 36 "74" `982 
E G "metter23_type" 1 36 "75" `983 
E G "metter24_action" 1 36 "76" `984 
E G "metter24_type" 1 36 "77" `985 
E G "metter25_action" 1 36 "78" `986 
E G "metter25_type" 1 37 "79" `987 
E G "metter26_action" 1 37 "80" `988 
E G "metter26_type" 1 38 "81" `989 
E G "metter1_action_in" 1 38 "82" `990 
E G "metter1_type_in" 1 38 "83" `991 
E G "metter2_action_in" 1 38 "84" `992 
E G "metter2_type_in" 1 39 "85" `993 
E G "metter3_action_in" 1 39 "86" `994 
E G "metter3_type_in" 1 39 "87" `995 
E G "metter4_action_in" 1 39 "88" `996 
E G "metter4_type_in" 1 39 "89" `997 
E G "metter5_action_in" 1 39 "90" `998 
E G "metter5_type_in" 1 40 "91" `999 
E G "metter6_action_in" 1 40 "92" `1000 
E G "metter6_type_in" 1 40 "93" `1001 
E G "metter7_action_in" 1 40 "94" `1002 
E G "metter7_type_in" 1 40 "95" `1003 
E G "metter8_action_in" 1 40 "96" `1004 
E G "metter8_type_in" 1 41 "97" `1005 
E G "metter9_action_in" 1 41 "98" `1006 
E G "metter9_type_in" 1 41 "99" `1007 
E G "metter10_action_in" 1 41 "100" `1008 
E G "metter10_type_in" 1 41 "101" `1009 
E G "metter11_action_in" 1 41 "102" `1010 
E G "metter11_type_in" 1 42 "103" `1011 
E G "metter12_action_in" 1 42 "104" `1012 
E G "metter12_type_in" 1 42 "105" `1013 
E G "metter13_action_in" 1 42 "106" `1014 
E G "metter13_type_in" 1 42 "107" `1015 
E G "metter14_action_in" 1 42 "108" `1016 
E G "metter14_type_in" 1 43 "109" `1017 
E G "metter15_action_in" 1 43 "110" `1018 
E G "metter15_type_in" 1 43 "111" `1019 
E G "metter16_action_in" 1 43 "112" `1020 
E G "metter16_type_in" 1 43 "113" `1021 
E G "metter17_action_in" 1 43 "114" `1022 
E G "metter17_type_in" 1 43 "115" `1023 
E G "metter18_action_in" 1 43 "116" `1024 
E G "metter18_type_in" 1 44 "117" `1025 
E G "metter19_action_in" 1 44 "118" `1026 
E G "metter19_type_in" 1 44 "119" `1027 
E G "metter20_action_in" 1 44 "120" `1028 
E G "metter20_type_in" 1 44 "121" `1029 
E G "metter21_action_in" 1 44 "122" `1030 
E G "metter21_type_in" 1 44 "123" `1031 
E G "metter22_action_in" 1 44 "124" `1032 
E G "metter22_type_in" 1 45 "125" `1033 
E G "metter23_action_in" 1 45 "126" `1034 
E G "metter23_type_in" 1 45 "127" `1035 
E G "metter24_action_in" 1 45 "128" `1036 
E G "metter24_type_in" 1 45 "129" `1037 
E G "metter25_action_in" 1 45 "130" `1038 
E G "metter25_type_in" 1 45 "131" `1039 
E G "metter26_action_in" 1 45 "132" `1040 
E G "metter26_type_in" 1 46 "133" `1041 
E G "add_ip_server" 1 46 "134" `1042 
E G "add_ip_client" 1 46 "135" `1043 
E G "add_ip_server1" 1 46 "136" `1044 
E G "add_ip_server2" 1 47 "137" `1045 
E G "add_ip_server3" 1 47 "138" `1046 
E G "add_ip_server4" 1 47 "139" `1047 
E G "add_ip_client1" 1 47 "140" `1048 
E G "add_ip_client2" 1 47 "141" `1049 
E G "add_ip_client3" 1 47 "142" `1050 
E G "add_ip_client4" 1 47 "143" `1051 
E G "add_ip_client_port" 1 47 "144" `1052 
E G "date_min" 1 47 "145" `1053 
E G "date_hour" 1 47 "146" `1054 
E G "date_day" 1 48 "147" `1055 
E G "date_month" 1 48 "148" `1056 
E G "date_year" 1 48 "149" `1057 
E G "metter1_current" 1 48 "150" `1058 
E G "metter1_current_in" 1 48 "151" `1059 
E G "metter2_current" 1 48 "152" `1060 
E G "metter2_current_in" 1 48 "153" `1061 
E G "metter3_current" 1 48 "154" `1062 
E G "metter3_current_in" 1 49 "155" `1063 
E G "metter4_current" 1 49 "156" `1064 
E G "metter4_current_in" 1 49 "157" `1065 
E G "metter5_current" 1 49 "158" `1066 
E G "metter5_current_in" 1 49 "159" `1067 
E G "metter6_current" 1 49 "160" `1068 
E G "metter6_current_in" 1 49 "161" `1069 
E G "metter7_current" 1 49 "162" `1070 
E G "metter7_current_in" 1 50 "163" `1071 
E G "metter8_current" 1 50 "164" `1072 
E G "metter8_current_in" 1 50 "165" `1073 
E G "metter9_current" 1 50 "166" `1074 
E G "metter9_current_in" 1 50 "167" `1075 
E G "metter10_current" 1 50 "168" `1076 
E G "metter10_current_in" 1 50 "169" `1077 
E G "metter11_current" 1 50 "170" `1078 
E G "metter11_current_in" 1 51 "171" `1079 
E G "metter12_current" 1 51 "172" `1080 
E G "metter12_current_in" 1 51 "173" `1081 
E G "metter13_current" 1 51 "174" `1082 
E G "metter13_current_in" 1 51 "175" `1083 
E G "metter14_current" 1 51 "176" `1084 
E G "metter14_current_in" 1 51 "177" `1085 
E G "metter15_current" 1 51 "178" `1086 
E G "metter15_current_in" 1 52 "179" `1087 
E G "metter16_current" 1 52 "180" `1088 
E G "metter16_current_in" 1 52 "181" `1089 
E G "metter17_current" 1 52 "182" `1090 
E G "metter17_current_in" 1 52 "183" `1091 
E G "metter18_current" 1 52 "184" `1092 
E G "metter18_current_in" 1 52 "185" `1093 
E G "metter19_current" 1 52 "186" `1094 
E G "metter19_current_in" 1 53 "187" `1095 
E G "metter20_current" 1 53 "188" `1096 
E G "metter20_current_in" 1 53 "189" `1097 
E G "metter21_current" 1 53 "190" `1098 
E G "metter21_current_in" 1 53 "191" `1099 
E G "metter22_current" 1 53 "192" `1100 
E G "metter22_current_in" 1 53 "193" `1101 
E G "metter23_current" 1 53 "194" `1102 
E G "metter23_current_in" 1 54 "195" `1103 
E G "metter24_current" 1 54 "196" `1104 
E G "metter24_current_in" 1 54 "197" `1105 
E G "metter25_current" 1 54 "198" `1106 
E G "metter25_current_in" 1 54 "199" `1107 
E G "metter26_current" 1 54 "200" `1108 
E G "metter26_current_in" 1 55 "201" `1109 
E G "metter1_vol" 1 55 "202" `1110 
E G "metter1_vol_in" 1 55 "203" `1111 
E G "metter2_vol" 1 55 "204" `1112 
E G "metter2_vol_in" 1 55 "205" `1113 
E G "metter3_vol" 1 55 "206" `1114 
E G "metter3_vol_in" 1 55 "207" `1115 
E G "metter4_vol" 1 55 "208" `1116 
E G "metter4_vol_in" 1 56 "209" `1117 
E G "metter5_vol" 1 56 "210" `1118 
E G "metter5_vol_in" 1 56 "211" `1119 
E G "metter6_vol" 1 56 "212" `1120 
E G "metter6_vol_in" 1 56 "213" `1121 
E G "metter7_vol" 1 56 "214" `1122 
E G "metter7_vol_in" 1 56 "215" `1123 
E G "metter8_vol" 1 56 "216" `1124 
E G "metter8_vol_in" 1 56 "217" `1125 
E G "metter9_vol" 1 56 "218" `1126 
E G "metter9_vol_in" 1 57 "219" `1127 
E G "metter10_vol" 1 57 "220" `1128 
E G "metter10_vol_in" 1 57 "221" `1129 
E G "metter11_vol" 1 57 "222" `1130 
E G "metter11_vol_in" 1 57 "223" `1131 
E G "metter12_vol" 1 57 "224" `1132 
E G "metter12_vol_in" 1 57 "225" `1133 
E G "metter13_vol" 1 57 "226" `1134 
E G "metter13_vol_in" 1 57 "227" `1135 
E G "metter14_vol" 1 57 "228" `1136 
E G "metter14_vol_in" 1 58 "229" `1137 
E G "metter15_vol" 1 58 "230" `1138 
E G "metter15_vol_in" 1 58 "231" `1139 
E G "metter16_vol" 1 58 "232" `1140 
E G "metter16_vol_in" 1 58 "233" `1141 
E G "metter17_vol" 1 58 "234" `1142 
E G "metter17_vol_in" 1 58 "235" `1143 
E G "metter18_vol" 1 58 "236" `1144 
E G "metter18_vol_in" 1 58 "237" `1145 
E G "metter19_vol" 1 58 "238" `1146 
E G "metter19_vol_in" 1 59 "239" `1147 
E G "metter20_vol" 1 59 "240" `1148 
E G "metter20_vol_in" 1 59 "241" `1149 
E G "metter21_vol" 1 59 "242" `1150 
E G "metter21_vol_in" 1 59 "243" `1151 
E G "metter22_vol" 1 59 "244" `1152 
E G "metter22_vol_in" 1 59 "245" `1153 
E G "metter23_vol" 1 59 "246" `1154 
E G "metter23_vol_in" 1 59 "247" `1155 
E G "metter24_vol" 1 59 "248" `1156 
E G "metter24_vol_in" 1 60 "249" `1157 
E G "metter25_vol" 1 60 "250" `1158 
E G "metter25_vol_in" 1 60 "251" `1159 
E G "metter26_vol" 1 60 "252" `1160 
E G "metter26_vol_in" 1 60 "253" `1161 
T G "state_device" 1 60 "" `1162 
V G "state" 1 61 "state_device" `1163 
V G "metter" 1 68 "{int1 action,int8 type,int16 current,int16 vol}[33]" `1169 
F N "conver_ieee574" 1 69 ""
V L "value1" 1 69 "int8" `1171 
V L "value2" 1 69 "int8" `1172 
V L "value3" 1 69 "int8" `1173 
V L "value4" 1 69 "int8" `1174 
F G "conver_ieee574" 1 70 "float(int8 value1,int8 value2,int8 value3,int8 value4)" `1170 
V L "value" 1 71 "int32" `1175 
V L "fraction" 1 72 "float" `1176 
V L "result" 1 72 "float" `1177 
V L "exponent" 1 72 "float" `1178 
F N "show_debug" 1 110 ""
F G "show_debug" 1 111 "void()" `1181 
C L "show_debug" 1 114 2 "FUNCTION"
C L "show_debug" 1 114 2 "FUNCTION"
C L "show_debug" 1 114 2 "FUNCTION"
F N "data_out" 1 125 ""
V L "type" 1 125 "int8" `1205 
F G "data_out" 1 126 "void(int8 type)" `1204 
C L "data_out" 1 114 2 "FUNCTION"
D G "_STRING" 5 12 ""
D G "_STDDEF" 6 13 ""
D G "ptrdiff_t" 6 18 "unsigned int16"
D G "size_t" 6 24 "unsigned int16"
D G "wchar_t" 6 26 "char"
D G "NULL" 6 27 "0"
D G "offsetof" 6 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 7 12 ""
D G "islower" 7 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 7 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 7 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 7 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 7 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 7 19 "(x)  ((x)==' ')"
D G "isxdigit" 7 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 7 21 "(x)  ((x)<' ')"
D G "isprint" 7 22 "(x)  ((x)>=' ')"
D G "isgraph" 7 23 "(x)  ((x)>' ')"
D G "ispunct" 7 24 "(x)  (((x)>' ')&&!isalnum(x))"
F N "memmove" 5 34 ""
V L "s1" 5 34 "*int8" `1214 
V L "s2" 5 34 "*int8" `1215 
V L "n" 5 34 "int16" `1216 
F G "memmove" 5 35 "*int8(*int8 s1,*int8 s2,int16 n)" `1213 
V L "sc1" 5 36 "*int8" `1217 
V L "sc2" 5 37 "*int8" `1218 
D G "strcopy" 5 54 "strcpy"
F N "strncpy" 5 61 ""
V L "s1" 5 61 "*int8" `1220 
V L "s2" 5 61 "*int8" `1221 
V L "n" 5 61 "int16" `1222 
F G "strncpy" 5 62 "*int8(*int8 s1,*int8 s2,int16 n)" `1219 
V L "s" 5 63 "*int8" `1223 
F N "strcat" 5 78 ""
V L "s1" 5 78 "*int8" `1225 
V L "s2" 5 78 "*int8" `1226 
F G "strcat" 5 79 "*int8(*int8 s1,*int8 s2)" `1224 
V L "s" 5 80 "*int8" `1227 
F N "strncat" 5 96 ""
V L "s1" 5 96 "*int8" `1229 
V L "s2" 5 96 "*int8" `1230 
V L "n" 5 96 "int16" `1231 
F G "strncat" 5 97 "*int8(*int8 s1,*int8 s2,int16 n)" `1228 
V L "s" 5 98 "*int8" `1232 
C L "memcmp" 5 19 3 "FUNCTION"
F N "memcmp" 5 120 ""
V L "s1" 5 120 "*int8" `1234 
V L "s2" 5 120 "*int8" `1235 
V L "n" 5 120 "int16" `1236 
F G "memcmp" 5 121 "sint8(*int8 s1,*int8 s2,int16 n)" `1233 
V L "su1" 5 122 "*int8" `1237 
V L "su2" 5 122 "*int8" `1238 
C L "strcmp" 5 19 2 "FUNCTION"
F N "strcmp" 5 134 ""
V L "s1" 5 134 "*int8" `1240 
V L "s2" 5 134 "*int8" `1241 
F G "strcmp" 5 135 "sint8(*int8 s1,*int8 s2)" `1239 
C L "strcoll" 5 19 2 "FUNCTION"
F N "strcoll" 5 144 ""
V L "s1" 5 144 "*int8" `1243 
V L "s2" 5 144 "*int8" `1244 
F G "strcoll" 5 145 "sint8(*int8 s1,*int8 s2)" `1242 
C L "strncmp" 5 19 4 "FUNCTION"
F N "strncmp" 5 157 ""
V L "s1" 5 157 "*int8" `1246 
V L "s2" 5 157 "*int8" `1247 
V L "n" 5 157 "int16" `1248 
F G "strncmp" 5 158 "sint8(*int8 s1,*int8 s2,int16 n)" `1245 
C L "strxfrm" 5 19 4 "FUNCTION"
F N "strxfrm" 5 170 ""
V L "s1" 5 170 "*int8" `1250 
V L "s2" 5 170 "*int8" `1251 
V L "n" 5 170 "int16" `1252 
F G "strxfrm" 5 171 "int16(*int8 s1,*int8 s2,int16 n)" `1249 
V L "c" 5 172 "int8" `1253 
V L "n1" 5 173 "int8" `1254 
C L "strxfrm" 5 19 1 "FUNCTION"
F N "memchr" 5 201 ""
V L "s" 5 201 "*int8" `1256 
V L "c" 5 201 "int8" `1257 
V L "n" 5 201 "int16" `1258 
F G "memchr" 5 202 "*int8(*int8 s,int8 c,int16 n)" `1255 
V L "uc" 5 203 "int8" `1259 
V L "su" 5 204 "*int8" `1260 
F N "strchr" 5 215 ""
V L "s" 5 215 "*int8" `1262 
V L "c" 5 215 "int8" `1263 
F G "strchr" 5 216 "*int8(*int8 s,int8 c)" `1261 
C L "strcspn" 5 19 4 "FUNCTION"
F N "strcspn" 5 227 ""
V L "s1" 5 227 "*int8" `1265 
V L "s2" 5 227 "*int8" `1266 
F G "strcspn" 5 228 "int8(*int8 s1,*int8 s2)" `1264 
V L "sc1" 5 229 "*int8" `1267 
V L "sc2" 5 229 "*int8" `1268 
F N "strpbrk" 5 242 ""
V L "s1" 5 242 "*int8" `1270 
V L "s2" 5 242 "*int8" `1271 
F G "strpbrk" 5 243 "*int8(*int8 s1,*int8 s2)" `1269 
V L "sc1" 5 244 "*int8" `1272 
V L "sc2" 5 244 "*int8" `1273 
F N "strrchr" 5 257 ""
V L "s" 5 257 "*int8" `1275 
V L "c" 5 257 "int8" `1276 
F G "strrchr" 5 258 "*int8(*int8 s,int8 c)" `1274 
V L "p" 5 259 "*int8" `1277 
C L "strspn" 5 19 2 "FUNCTION"
F N "strspn" 5 272 ""
V L "s1" 5 272 "*int8" `1279 
V L "s2" 5 272 "*int8" `1280 
F G "strspn" 5 273 "int8(*int8 s1,*int8 s2)" `1278 
V L "sc1" 5 274 "*int8" `1281 
V L "sc2" 5 274 "*int8" `1282 
F N "strstr" 5 291 ""
V L "s1" 5 291 "*int8" `1284 
V L "s2" 5 291 "*int8" `1285 
F G "strstr" 5 292 "*int8(*int8 s1,*int8 s2)" `1283 
V L "s" 5 293 "*int8" `1286 
V L "t" 5 293 "*int8" `1287 
C L "strlen" 5 19 2 "FUNCTION"
F N "strlen" 5 318 ""
V L "s" 5 318 "*int8" `1289 
F G "strlen" 5 319 "int16(*int8 s)" `1288 
V L "sc" 5 320 "*int8" `1290 
F N "strtok" 5 341 ""
V L "s1" 5 341 "*int8" `1292 
V L "s2" 5 341 "*int8" `1293 
F G "strtok" 5 342 "*int8(*int8 s1,*int8 s2)" `1291 
V L "beg" 5 343 "*int8" `1294 
V L "end" 5 343 "*int8" `1295 
V L "save" 5 344 "*int8" `1296 
C L "stricmp" 5 19 6 "FUNCTION"
F N "stricmp" 5 392 ""
V L "s1" 5 392 "*int8" `1298 
V L "s2" 5 392 "*int8" `1299 
F G "stricmp" 5 393 "sint8(*int8 s1,*int8 s2)" `1297 
F N "strlwr" 5 406 ""
V L "s" 5 406 "*int8" `1303 
F G "strlwr" 5 407 "*int8(*int8 s)" `1302 
V L "p" 5 408 "*int8" `1304 
F N "strupr" 5 420 ""
V L "s" 5 420 "*int8" `1306 
F G "strupr" 5 421 "*int8(*int8 s)" `1305 
V L "p" 5 422 "*int8" `1307 
F N "lcd_send_nibble" 8 1 ""
V L "n" 8 1 "int8" `1309 
f G "lcd_send_nibble" 8 1 "void(int8 n)" `1308 
F N "lcd_send_byte" 8 2 ""
V L "address" 8 2 "int8" `1311 
V L "n" 8 2 "int8" `1312 
f G "lcd_send_byte" 8 2 "void(int8 address,int8 n)" `1310 
F N "lcd_init" 8 3 ""
f G "lcd_init" 8 3 "void()" `1313 
F N "lcd_init1" 8 4 ""
f G "lcd_init1" 8 4 "void()" `1314 
F N "lcd_gotoxy" 8 5 ""
V L "x" 8 5 "int8" `1316 
V L "y" 8 5 "int8" `1317 
f G "lcd_gotoxy" 8 5 "void(int8 x,int8 y)" `1315 
F N "lcd_putc" 8 6 ""
V L "c" 8 6 "int8" `1319 
f G "lcd_putc" 8 6 "void(int8 c)" `1318 
F N "lcd_clr" 8 7 ""
f G "lcd_clr" 8 7 "void()" `1320 
F N "lcd_text_art1" 8 8 ""
V L "col" 8 8 "int8" `1322 
V L "row" 8 8 "int8" `1323 
V L "st" 8 8 "*int8" `1324 
V L "time_delay" 8 8 "int16" `1325 
f G "lcd_text_art1" 8 8 "void(int8 col,int8 row,*int8 st,int16 time_delay)" `1321 
F N "display_art_base2" 8 9 ""
V L "col" 8 9 "int8" `1327 
V L "row" 8 9 "int8" `1328 
V L "n" 8 9 "int8" `1329 
V L "ch" 8 9 "int8" `1330 
f G "display_art_base2" 8 9 "void(int8 col,int8 row,int8 n,int8 ch)" `1326 
F N "lcd_text_art2" 8 10 ""
V L "col" 8 10 "int8" `1332 
V L "row" 8 10 "int8" `1333 
V L "st" 8 10 "*int8" `1334 
V L "time_delay" 8 10 "int16" `1335 
f G "lcd_text_art2" 8 10 "void(int8 col,int8 row,*int8 st,int16 time_delay)" `1331 
F N "lcd_display_int" 8 11 ""
V L "number" 8 11 "int16" `1337 
f G "lcd_display_int" 8 11 "void(int16 number)" `1336 
F N "lcd_display_time" 8 12 ""
V L "data" 8 12 "int8" `1339 
f G "lcd_display_time" 8 12 "void(int8 data)" `1338 
F N "set_cgram" 8 13 ""
f G "set_cgram" 8 13 "void()" `1340 
D G "lcd_rs" 4 31 "PIN_B0"
D G "lcd_enable" 4 32 "PIN_B1"
D G "data4" 4 33 "PIN_B5"
D G "data5" 4 34 "PIN_B4"
D G "data6" 4 35 "PIN_B3"
D G "data7" 4 36 "PIN_B2"
D G "lcd_line_two" 4 37 "0x40" "LCD RAM address for the second line"
C L "set_cgram" 4 39 1 "FUNCTION"
V G "image" 4 40 "[56]" `1342 
C L "set_cgram" 4 39 1 "FUNCTION"
C L "set_cgram" 4 39 1 "FUNCTION"
C L "set_cgram" 4 39 1 "FUNCTION"
C L "set_cgram" 4 39 1 "FUNCTION"
C L "set_cgram" 4 39 1 "FUNCTION"
C L "set_cgram" 4 39 1 "FUNCTION"
C L "set_cgram" 4 39 1 "FUNCTION"
V G "LCD_INIT_STRING" 4 50 "[4]" `1345 
C L "set_cgram" 4 39 2 "FUNCTION"
V G "LCD_INIT_STRING1" 4 53 "[4]" `1348 
C L "set_cgram" 4 39 3 "FUNCTION"
F N "lcd_send_nibble" 4 58 ""
V L "n" 4 58 "int8" `1351 
F G "lcd_send_nibble" 4 58 "void(int8 n)" `1308 
V L "n1" 4 59 "int8" `1350 
F N "lcd_send_byte" 4 77 ""
V L "address" 4 77 "int8" `1311 
V L "n" 4 77 "int8" `1353 
F G "lcd_send_byte" 4 77 "void(int8 address,int8 n)" `1310 
F N "lcd_init" 4 90 ""
F G "lcd_init" 4 90 "void()" `1313 
V L "i" 4 91 "int8" `1351  "set_tris_lcd(LCD_WRITE);"
F N "lcd_init1" 4 108 ""
F G "lcd_init1" 4 108 "void()" `1314 
V L "i" 4 109 "int8" `1357 
F N "lcd_gotoxy" 4 115 ""
V L "x" 4 115 "int8" `1316 
V L "y" 4 115 "int8" `1360 
F G "lcd_gotoxy" 4 115 "void(int8 x,int8 y)" `1315 
V L "address" 4 116 "int8" `1358 
F N "lcd_putc" 4 126 ""
V L "c" 4 126 "int8" `1360 
F G "lcd_putc" 4 126 "void(int8 c)" `1318 
C L "lcd_putc" 4 39 1 "FUNCTION"
F N "lcd_clr" 4 137 ""
F G "lcd_clr" 4 138 "void()" `1320 
C L "lcd_display_int" 4 39 37 "FUNCTION"
F N "lcd_display_int" 4 205 ""
V L "number" 4 205 "int16" `1360 
F G "lcd_display_int" 4 205 "void(int16 number)" `1336 
V L "temp" 4 206 "int16" `1359 
V L "i" 4 207 "int8" `1360 
V L "c" 4 207 "int8[10]" `1361 
C L "lcd_display_time" 4 39 1 "FUNCTION"
F N "lcd_display_time" 4 219 ""
V L "data" 4 219 "int8" `1366 
F G "lcd_display_time" 4 219 "void(int8 data)" `1338 
C L "set_cgram" 4 39 1 "FUNCTION"
F N "set_cgram" 4 225 ""
F G "set_cgram" 4 226 "void()" `1340 
V L "i_cgram" 4 227 "int8" `1365 
C L "set_cgram" 4 39 2 "FUNCTION"
C L "set_cgram" 4 39 1 "FUNCTION"
C L "set_cgram" 4 39 1 "FUNCTION"
F N "bin2bcd" 9 1 ""
V L "binary_value" 9 1 "int8" `1367 
f G "bin2bcd" 9 1 "int8(int8 binary_value)" `1366 
F N "bcd2bin" 9 2 ""
V L "bcd_value" 9 2 "int8" `1369 
f G "bcd2bin" 9 2 "int8(int8 bcd_value)" `1368 
F N "ds1307_init" 9 4 ""
F G "ds1307_init" 9 5 "void()" `1370 
V L "seconds" 9 6 "int8" `1371 
C L "ds1307_init" 9 9 1 "FUNCTION"
C L "ds1307_init" 9 9 1 "FUNCTION"
C L "ds1307_init" 9 9 1 "FUNCTION"
C L "ds1307_init" 9 9 1 "FUNCTION"
C L "ds1307_init" 9 9 1 "FUNCTION"
C L "ds1307_init" 9 9 1 "FUNCTION"
C L "ds1307_init" 9 9 1 "FUNCTION"
C L "ds1307_init" 9 9 1 "FUNCTION"
C L "ds1307_init" 9 9 1 "FUNCTION"
C L "ds1307_init" 9 9 1 "FUNCTION"
F N "ds1307_set_date_time" 9 31 ""
V L "day" 9 31 "int8" `1373 
V L "mth" 9 31 "int8" `1374 
V L "year" 9 31 "int8" `1375 
V L "dow" 9 31 "int8" `1376 
V L "hr" 9 31 "int8" `1377 
V L "min" 9 31 "int8" `1378 
V L "sec" 9 31 "int8" `1379 
F G "ds1307_set_date_time" 9 32 "void(int8 day,int8 mth,int8 year,int8 dow,int8 hr,int8 min,int8 sec)" `1372 
C L "ds1307_set_date_time" 9 9 1 "FUNCTION"
C L "ds1307_set_date_time" 9 9 1 "FUNCTION"
C L "ds1307_set_date_time" 9 9 1 "FUNCTION"
C L "ds1307_set_date_time" 9 9 1 "FUNCTION"
C L "ds1307_set_date_time" 9 9 1 "FUNCTION"
C L "ds1307_set_date_time" 9 9 1 "FUNCTION"
C L "ds1307_set_date_time" 9 9 1 "FUNCTION"
C L "ds1307_set_date_time" 9 9 1 "FUNCTION"
C L "ds1307_set_date_time" 9 9 1 "FUNCTION"
C L "ds1307_set_date_time" 9 9 1 "FUNCTION"
F N "ds1307_get_date" 9 49 ""
V L "day" 9 49 "int8" `1381 
V L "mth" 9 49 "int8" `1382 
V L "year" 9 49 "int8" `1383 
V L "dow" 9 49 "int8" `1384 
F G "ds1307_get_date" 9 50 "void(int8 day,int8 mth,int8 year,int8 dow)" `1380 
C L "ds1307_get_date" 9 9 1 "FUNCTION"
C L "ds1307_get_date" 9 9 1 "FUNCTION"
C L "ds1307_get_date" 9 9 1 "FUNCTION"
C L "ds1307_get_date" 9 9 1 "FUNCTION"
C L "ds1307_get_date" 9 9 1 "FUNCTION"
F N "ds1307_get_time" 9 62 ""
V L "hr" 9 62 "int8" `1386 
V L "min" 9 62 "int8" `1387 
V L "sec" 9 62 "int8" `1388 
F G "ds1307_get_time" 9 63 "void(int8 hr,int8 min,int8 sec)" `1385 
C L "ds1307_get_time" 9 9 1 "FUNCTION"
F N "bin2bcd" 9 75 ""
V L "binary_value" 9 75 "int8" `1390 
F G "bin2bcd" 9 76 "int8(int8 binary_value)" `1366 
V L "temp" 9 77 "int8" `1389 
V L "retval" 9 78 "int8" `1390 
C L "bin2bcd" 9 9 2 "FUNCTION"
C L "bin2bcd" 9 9 1 "FUNCTION"
C L "bcd2bin" 9 9 1 "FUNCTION"
F N "bcd2bin" 9 102 ""
V L "bcd_value" 9 102 "int8" `1392 
F G "bcd2bin" 9 103 "int8(int8 bcd_value)" `1368 
V L "temp" 9 104 "int8" `1391 
C L "bcd2bin" 9 9 1 "FUNCTION"
C L "bcd2bin" 9 9 1 "FUNCTION"
C L "bcd2bin" 9 9 1 "FUNCTION"
F N "crc16_modbus" 10 1 ""
V L "data" 10 1 "*int8" `1393 
V L "len" 10 1 "int8" `1394 
F G "crc16_modbus" 10 2 "int16(*int8 data,int8 len)" `1392 
V L "c" 10 3 "int8" `1395 
V L "i" 10 3 "int8" `1396 
V L "flag" 10 3 "int8" `1397 
V L "crc16" 10 4 "int16" `1398 
F N "send_metter" 10 21 ""
V L "addr" 10 21 "int8" `1400 
V L "type" 10 21 "int8" `1401 
F G "send_metter" 10 22 "void(int8 addr,int8 type)" `1399 
V L "i" 10 23 "int8" `1402 
C L "send_metter" 10 27 1 "FUNCTION"
C L "send_metter" 10 27 1 "FUNCTION"
C L "send_metter" 10 27 4 "FUNCTION"
C L "send_metter" 10 27 1 "FUNCTION"
C L "send_metter" 10 27 1 "FUNCTION"
C L "send_metter" 10 27 1 "FUNCTION"
C L "send_metter" 10 27 4 "FUNCTION"
C L "send_metter" 10 27 1 "FUNCTION"
C L "send_metter" 10 27 1 "FUNCTION"
C L "send_metter" 10 27 2 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
F N "rtu_init" 10 82 ""
F G "rtu_init" 10 83 "void()" `1404 
V L "value" 10 84 "int8" `1405  "-------------------------metter1"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 1 "FUNCTION"
C L "rtu_init" 10 27 20 "FUNCTION"
F N "send_ip" 10 933 ""
F G "send_ip" 10 934 "void()" `1410 
F N "output_alarm" 10 951 ""
V L "out" 10 951 "int16" `1412 
F G "output_alarm" 10 952 "void(int16 out)" `1411 
V L "ror" 10 953 "int8" `1413 
V L "x" 10 953 "int8" `1414 
F N "set_alarm_metter" 10 977 ""
V L "add" 10 977 "int8" `1416 
V L "value" 10 977 "int8" `1417 
V L "output" 10 977 "int16" `1418 
F G "set_alarm_metter" 10 978 "void(int8 add,int8 value,int16 output)" `1415 
D G "MAXFILES" 12 1 "1" "This define specifies the maximum number"
D G "ENABLE_FILELISTNG" 12 11 ""
T G "diskinforec" 12 34 "{int8[3] hJumpCode,int8[8] OEMName,int16 hBytesPerSector,int8 bSectorsPerCluster,int16 Reserved1,int8 FATCopies,int16 hMaxRootEntries,int16 hSectors,int8 Descriptor,int16 holdSectorsPerFat,int16 hSectorsPerTrack,int16 hNumberofHeads,int32 hNumberofHidden,int32 hNumberofSectors,int32 hSectorsPerFat,int16 hFlags,int16 hFAT32Version,int32 hRootStartCluster}" `1439 
T G "DIR" 12 47 "{int8[8] sName,int8[3] spam,int8 bAttr,int8[8] bReserved,int16 hClusterH,int16 hTime,int16 hDate,int16 hCluster,int32 wSize}" `1450 
T G "FILE" 12 60 "{int8[512] IOpuffer,DIR DirEntry,int32 CurrentCluster,int16 posinsector,int32 position,int32 dirSector,int8 dirIdx,int8 mode,int1 Free}" `1461 
T G "FAT32Vars" 12 72 "{int32 MMCAddress,int32 FATstartidx,int32 gStartSector,int32 gFirstDataSector,int8 gDirEntryIdx,int32 gDirEntrySector,int8 gFirstEmptyDirEntry,int32 gFirstDirEntryCluster}" `1471 
T G "TimeRecord" 12 82 "{int16 year,int8 month,int8 day,int8 hour,int8 Minute,int8 Second}" `1479 
T G "ListPos" 12 89 "{int32 dirSector,int32 CurrentCluster,int8 dirIdx}" `1484 
T G "LongFileName" 12 97 "{*int8 name,*int8 shortName,int1 isDir,int1 isLong}" `1490 
T G "MMCResponse" 12 99 "int8" `1491 
F N "MMCInit" 12 101 ""
f G "MMCInit" 12 101 "MMCResponse()" `1492 
F N "ReadSector" 12 102 ""
V L "sector" 12 102 "int32" `1494 
V L "hova" 12 102 "*int8" `1495 
f G "ReadSector" 12 102 "MMCResponse(int32 sector,*int8 hova)" `1493 
F N "WriteSector" 12 103 ""
V L "sector" 12 103 "int32" `1497 
V L "honnan" 12 103 "*int8" `1498 
f G "WriteSector" 12 103 "MMCResponse(int32 sector,*int8 honnan)" `1496 
F N "InitFAT" 12 105 ""
f G "InitFAT" 12 105 "void()" `1499 
F N "FindDirEntry" 12 106 ""
V L "fname" 12 106 "*int8" `1501 
V L "f" 12 106 "int8" `1502 
f G "FindDirEntry" 12 106 "int8(*int8 fname,int8 f)" `1500 
F N "InitList" 12 109 ""
V L "path" 12 109 "*int8" `1504 
f G "InitList" 12 109 "MMCResponse(*int8 path)" `1503 
F N "ListFiles" 12 110 ""
V L "f" 12 110 "int8" `1506 
f G "ListFiles" 12 110 "int8(int8 f)" `1505 
F N "NextPage" 12 111 ""
V L "f" 12 111 "int8" `1508 
f G "NextPage" 12 111 "MMCResponse(int8 f)" `1507 
F N "SetPage" 12 112 ""
V L "f" 12 112 "int8" `1510 
V L "page" 12 112 "int32" `1511 
f G "SetPage" 12 112 "MMCResponse(int8 f,int32 page)" `1509 
F N "CloseList" 12 113 ""
V L "f" 12 113 "int8" `1513 
f G "CloseList" 12 113 "MMCResponse(int8 f)" `1512 
F N "FreeList" 12 114 ""
f G "FreeList" 12 114 "void()" `1514 
F N "fopen" 12 117 ""
V L "fname" 12 117 "*int8" `1516 
V L "mode" 12 117 "int8" `1517 
f G "fopen" 12 117 "MMCResponse(*int8 fname,int8 mode)" `1515 
F N "fclose" 12 118 ""
V L "f" 12 118 "int8" `1519 
f G "fclose" 12 118 "MMCResponse(int8 f)" `1518 
F N "fflush" 12 119 ""
V L "f" 12 119 "int8" `1521 
f G "fflush" 12 119 "MMCResponse(int8 f)" `1520 
F N "cwd" 12 120 ""
V L "fname" 12 120 "*int8" `1523 
V L "f" 12 120 "int8" `1524 
f G "cwd" 12 120 "int8(*int8 fname,int8 f)" `1522 
F N "fputch" 12 121 ""
V L "be" 12 121 "int8" `1526 
V L "f" 12 121 "int8" `1527 
f G "fputch" 12 121 "MMCResponse(int8 be,int8 f)" `1525 
F N "fgetch" 12 122 ""
V L "ki" 12 122 "*int8" `1529 
V L "f" 12 122 "int8" `1530 
f G "fgetch" 12 122 "MMCResponse(*int8 ki,int8 f)" `1528 
F N "fputstring" 12 123 ""
V L "be" 12 123 "*int8" `1532 
V L "f" 12 123 "int8" `1533 
f G "fputstring" 12 123 "MMCResponse(*int8 be,int8 f)" `1531  "fputs is reserved in CCS C"
F N "fread" 12 124 ""
V L "buffer" 12 124 "*int8" `1535 
V L "leng" 12 124 "int16" `1536 
V L "f" 12 124 "int8" `1537 
f G "fread" 12 124 "int16(*int8 buffer,int16 leng,int8 f)" `1534 
F N "fwrite" 12 125 ""
V L "buffer" 12 125 "*int8" `1539 
V L "leng" 12 125 "int16" `1540 
V L "f" 12 125 "int8" `1541 
f G "fwrite" 12 125 "MMCResponse(*int8 buffer,int16 leng,int8 f)" `1538 
F N "remove" 12 126 ""
V L "fname" 12 126 "*int8" `1543 
f G "remove" 12 126 "MMCResponse(*int8 fname)" `1542 
F N "getfsize" 12 127 ""
V L "fname" 12 127 "*int8" `1545 
V L "fsiz" 12 127 "*int32" `1546 
f G "getfsize" 12 127 "MMCResponse(*int8 fname,*int32 fsiz)" `1544  "FAT32 DRIVER FOR MMC OVER SPI //////////////////////"
D G "MMC_SPI_SOFTWARE" 13 207 ""
D G "SET_MMC_TRIS" 13 213 "() set_tris_d(0x04)" "0b0001000 1=input,0=output 0100 0x00000010"
D G "ChipSel" 13 215 "pin_D0" "Chip-Select pin"
D G "ChipClk" 13 216 "pin_D3" "SPI-Clock pin"
D G "ChipDout" 13 217 "pin_D1" "SPI-Data out pin"
D G "ChipDin" 13 218 "pin_D2" "SPI-Data in pin"
D G "MMC_Xfer" 13 224 "(a) SPI_Xfer(MMC_SPI,a)"
D G "_STDLIBM" 14 14 ""
C L "getfsize" 14 2 1 "FUNCTION"
C L "getfsize" 6 2 7 "FUNCTION"
T G "node_t" 14 29 "{int16 size,int16 next}" `1554 
D G "debug_stdlibm" 14 41 "(s)"
D G "_MEMMGMT_CSIZE" 15 12 "32768"
D G "_MEMMGMT_POS" 15 13 "15"
F N "create_node" 15 22 ""
V L "size" 15 22 "int16" `1557 
V L "ptr" 15 22 "*node_t" `1558  "create node at given location"
F G "create_node" 15 23 "*node_t(int16 size,*node_t ptr)" `1556 
V L "result" 15 24 "*node_t" `1559 
F N "update_node" 15 30 ""
V L "node" 15 30 "*node_t" `1561 
V L "size" 15 30 "int16" `1562  "update the size of given node"
F G "update_node" 15 31 "void(*node_t node,int16 size)" `1560 
C L "insert_node_after" 15 2 2 "FUNCTION"
F N "insert_node_after" 15 36 ""
V L "place" 15 36 "*node_t" `1564 
V L "node" 15 36 "*node_t" `1565  "place the node after another given node"
F G "insert_node_after" 15 37 "void(*node_t place,*node_t node)" `1563 
F N "remove_node" 15 47 ""
V L "node" 15 47 "*node_t" `1567 
F G "remove_node" 15 47 "void(*node_t node)" `1566  "remove the given node from the memlist"
V L "ptr" 15 48 "*node_t" `1568 
F N "traverse" 14 60 ""
F G "traverse" 14 61 "void()" `1569 
V L "node" 14 62 "*node_t" `1570 
V L "temp" 14 62 "*node_t" `1571 
V L "nsize" 14 63 "int16" `1572 
V L "nextsize" 14 63 "int16" `1573 
C L "traverse" 14 75 1 "FUNCTION"
C L "traverse" 14 75 1 "FUNCTION"
F N "malloc" 14 102 ""
V L "size" 14 102 "int16" `1575 
F G "malloc" 14 103 "*int8(int16 size)" `1574 
V L "node" 14 104 "*node_t" `1576 
V L "new" 14 104 "*node_t" `1577 
V L "nsize" 14 105 "int16" `1578 
C L "malloc" 14 75 1 "FUNCTION"
C L "malloc" 14 75 1 "FUNCTION"
C L "malloc" 14 75 1 "FUNCTION"
C L "malloc" 14 75 1 "FUNCTION"
C L "malloc" 14 75 1 "FUNCTION"
C L "malloc" 14 75 1 "FUNCTION"
C L "malloc" 14 75 1 "FUNCTION"
C L "malloc" 14 75 1 "FUNCTION"
C L "malloc" 14 75 1 "FUNCTION"
C L "malloc" 14 75 1 "FUNCTION"
F N "calloc" 14 159 ""
V L "nmemb" 14 159 "int16" `1580 
V L "size" 14 159 "int16" `1581 
F G "calloc" 14 160 "*int8(int16 nmemb,int16 size)" `1579 
V L "node" 14 161 "*node_t" `1582 
V L "new" 14 161 "*node_t" `1583 
V L "nsize" 14 162 "int16" `1584 
V L "resize" 14 162 "int16" `1585 
C L "calloc" 14 75 1 "FUNCTION"
C L "calloc" 14 75 1 "FUNCTION"
C L "calloc" 14 75 1 "FUNCTION"
C L "calloc" 14 75 1 "FUNCTION"
C L "calloc" 14 75 1 "FUNCTION"
C L "calloc" 14 75 1 "FUNCTION"
C L "calloc" 14 75 1 "FUNCTION"
C L "calloc" 14 75 1 "FUNCTION"
C L "calloc" 14 75 1 "FUNCTION"
C L "calloc" 14 75 1 "FUNCTION"
F N "Free" 14 207 ""
V L "ptr" 14 207 "*int8" `1591 
F G "Free" 14 208 "void(*int8 ptr)" `1590 
V L "node" 14 209 "*node_t" `1592 
V L "nsize" 14 210 "int16" `1593 
C L "Free" 14 75 1 "FUNCTION"
C L "Free" 14 75 1 "FUNCTION"
C L "Free" 14 75 1 "FUNCTION"
F N "realloc" 14 238 ""
V L "ptr" 14 238 "*int8" `1595 
V L "size" 14 238 "int16" `1596 
F G "realloc" 14 239 "*int8(*int8 ptr,int16 size)" `1594 
V L "node" 14 240 "*node_t" `1597 
V L "new" 14 240 "*node_t" `1598 
V L "temp" 14 240 "*node_t" `1599 
V L "nsize" 14 241 "int16" `1600 
V L "nextsize" 14 241 "int16" `1601 
V L "newptr" 14 242 "*int8" `1602 
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
C L "realloc" 14 75 1 "FUNCTION"
V G "FATTable" 13 238 "int32[128]" `1603 
V G "gFirstEmptyCluster" 13 239 "int32" `1604 
V G "gFAT32Vars" 13 241 "FAT32Vars" `1605 
V G "DiskInfo" 13 242 "diskinforec" `1606 
V G "gFiles" 13 243 "FILE[1]" `1607  "Time stores the date and time, this is used when writing and/or creating files"
V G "time" 13 246 "TimeRecord" `1608  "Set the maximum number of files/dirs to be listed by Listfile()"
D G "MAX_FILE_LIST" 13 250 "10"
V G "StartList" 13 252 "ListPos" `1609 
V G "CurrentList" 13 253 "ListPos" `1610 
V G "changeList" 13 254 "int1" `1611  "Do not use this; it is only used by SetPage() and ListFiles() and Initialized by InitFAT()"
V G "FileList" 13 256 "LongFileName[10]" `1612 
D G "FSR0L" 13 269 "*0xFE9"
D G "POSTINC0" 13 270 "*0xFEE"
D G "MMC_OK" 13 273 "0"
D G "MMC_ERROR" 13 274 "0x80"
D G "MMC_INVALID_FILE" 13 275 "0x88"
D G "MMC_MAX_FILES_REACHED" 13 276 "0x90"
D G "MMC_NO_CARD_INSERTED" 13 277 "0x98"
D G "MMC_TIME_OUT" 13 278 "0xA0"
D G "MMC_INVALID_RESPONSE" 13 279 "0xA8"
D G "MMC_NOT_FOUND" 13 280 "0xB0"
D G "MMC_INVALID_CLUSTER" 13 281 "0xB8"
D G "MMC_END_OF_DIR" 13 282 "0xC0"
D G "MMC_INVALID_POSITION" 13 283 "0xC8"
D G "END_OF_DIR" 13 286 "17"
D G "DIRENTRYS_PER_SECTOR" 13 287 "16"
D G "CHARACTERS_IN_LONG_FILENAMES" 13 288 "13"
D G "CardInserted" 13 294 "() 1"
D G "MMC_Select" 13 297 "()    output_low(ChipSel)"
D G "MMC_Deselect" 13 298 "()   output_high(ChipSel)"
C L "IsSelfDir" 13 251 1 "FUNCTION"
F N "IsSelfDir" 13 304 ""
V L "be" 13 304 "*int8" `1621 
F G "IsSelfDir" 13 305 "int8(*int8 be)" `1620 
F N "MMCOut" 13 312 ""
V L "indata" 13 312 "int8" `1623 
F G "MMCOut" 13 313 "void(int8 indata)" `1622 
F N "MMC8Clock" 13 324 ""
F G "MMC8Clock" 13 325 "void()" `1624 
F N "MMCIn" 13 336 ""
F G "MMCIn" 13 337 "int8()" `1625 
F N "MMCInit" 13 349 ""
F G "MMCInit" 13 350 "MMCResponse()" `1492 
V L "response" 13 351 "int8" `1626 
V L "iii" 13 351 "int8" `1627 
V L "errcnt" 13 351 "int8" `1628 
C L "MMCInit" 13 251 1 "FUNCTION"
C L "MMCInit" 13 251 1 "FUNCTION"
C L "MMCInit" 13 251 1 "FUNCTION"
C L "MMCInit" 13 251 1 "FUNCTION"
C L "MMCInit" 13 251 1 "FUNCTION"
C L "MMCInit" 13 251 1 "FUNCTION"
C L "GetCurrentDOSDate" 13 251 5 "FUNCTION"
F N "GetCurrentDOSDate" 13 422 ""
F G "GetCurrentDOSDate" 13 423 "int16()" `1629 
V L "retval" 13 424 "int16" `1630 
C L "GetCurrentDOSTime" 13 251 5 "FUNCTION"
F N "GetCurrentDOSTime" 13 440 ""
F G "GetCurrentDOSTime" 13 441 "int16()" `1631 
V L "retval" 13 442 "int16" `1632 
C L "ReadSector" 13 251 1 "FUNCTION"
F N "ReadSector" 13 453 ""
V L "sector" 13 453 "int32" `1494 
V L "hova" 13 453 "*int8" `1635 
F G "ReadSector" 13 454 "MMCResponse(int32 sector,*int8 hova)" `1493 
V L "errs" 13 455 "int8" `1633 
V L "response" 13 455 "int8" `1634 
V L "cnt2" 13 456 "int8" `1635 
V L "cnt3" 13 456 "int8" `1636 
C L "ReadSector" 13 492 1 "*0xFE9"
C L "ReadSector" 13 500 1 "*0xFEE"
C L "WriteSector" 13 500 1 "FUNCTION"
F N "WriteSector" 13 516 ""
V L "sector" 13 516 "int32" `1497 
V L "honnan" 13 516 "*int8" `1642 
F G "WriteSector" 13 517 "MMCResponse(int32 sector,*int8 honnan)" `1496 
V L "errs" 13 518 "int8" `1640 
V L "response" 13 518 "int8" `1641 
V L "cnt2" 13 519 "int8" `1642 
V L "cnt3" 13 519 "int8" `1643 
C L "WriteSector" 13 500 1 "FUNCTION"
C L "WriteSector" 13 500 1 "FUNCTION"
C L "WriteSector" 13 558 1 "*0xFE9"
C L "WriteSector" 13 568 1 "*0xFEE"
C L "WriteSector" 13 568 1 "FUNCTION"
C L "WriteSector" 13 568 1 "FUNCTION"
C L "InitFAT" 13 568 1 "FUNCTION"
F N "InitFAT" 13 598 ""
F G "InitFAT" 13 599 "void()" `1499 
V L "actsector" 13 600 "int32" `1648 
V L "i" 13 601 "int8" `1649 
C L "InitFAT" 13 568 1 "FUNCTION"
C L "InitFAT" 13 568 1 "FUNCTION"
F N "GetNextCluster" 13 632 ""
V L "curcluster" 13 632 "int32" `1651 
F G "GetNextCluster" 13 633 "int32(int32 curcluster)" `1650 
V L "actsector" 13 634 "int32" `1652 
V L "clpage" 13 635 "int32" `1653 
V L "clpos" 13 636 "int8" `1654 
C L "GetNextCluster" 13 568 1 "FUNCTION"
F N "SetClusterEntry" 13 649 ""
V L "curcluster" 13 649 "int32" `1656 
V L "value" 13 649 "int32" `1657 
F G "SetClusterEntry" 13 650 "void(int32 curcluster,int32 value)" `1655 
V L "actsector" 13 651 "int32" `1658 
V L "clpage" 13 652 "int32" `1659 
V L "clpos" 13 653 "int8" `1660 
F N "ClearClusterEntry" 13 669 ""
V L "curcluster" 13 669 "int32" `1662 
F G "ClearClusterEntry" 13 670 "void(int32 curcluster)" `1661 
V L "actsector" 13 671 "int32" `1663 
V L "clpage" 13 672 "int32" `1664 
V L "clpos" 13 673 "int8" `1665 
F N "FindFirstFreeCluster" 13 690 ""
F G "FindFirstFreeCluster" 13 691 "int32()" `1666 
V L "i" 13 692 "int32" `1667 
V L "st" 13 692 "int32" `1668 
V L "actsector" 13 692 "int32" `1669 
V L "retval" 13 692 "int32" `1670 
V L "j" 13 693 "int8" `1671 
C L "ConvertFilename" 13 568 1 "FUNCTION"
F N "ConvertFilename" 13 719 ""
V L "beDir" 13 719 "*DIR" `1673 
V L "name" 13 719 "*int8" `1674 
F G "ConvertFilename" 13 720 "void(*DIR beDir,*int8 name)" `1672 
V L "i" 13 721 "int8" `1675 
V L "j" 13 721 "int8" `1676 
V L "c" 13 721 "int8" `1677 
C L "ConvertLongFilename" 13 568 2 "FUNCTION"
F N "ConvertLongFilename" 13 746 ""
V L "beDir" 13 746 "*DIR" `1679 
V L "name" 13 746 "*int8" `1680 
F G "ConvertLongFilename" 13 747 "void(*DIR beDir,*int8 name)" `1678 
V L "i" 13 748 "int8" `1681 
V L "j" 13 748 "int8" `1682 
V L "c" 13 748 "int8" `1683 
F N "GetDOSName" 13 782 ""
V L "pDir" 13 782 "*DIR" `1685 
V L "fname" 13 782 "*int8" `1686 
F G "GetDOSName" 13 783 "void(*DIR pDir,*int8 fname)" `1684 
V L "i" 13 784 "int8" `1687 
V L "j" 13 784 "int8" `1688 
V L "leng" 13 784 "int8" `1689 
V L "c" 13 784 "int8" `1690 
V L "toext" 13 784 "int8" `1691 
C L "ReadRootDirectory" 13 568 1 "FUNCTION"
F N "ReadRootDirectory" 13 810 ""
V L "fil" 13 810 "int8" `1693 
F G "ReadRootDirectory" 13 811 "MMCResponse(int8 fil)" `1692 
V L "actsector" 13 812 "int32" `1694 
C L "FindDirEntry" 13 568 1 "FUNCTION"
F N "FindDirEntry" 13 827 ""
V L "fname" 13 827 "*int8" `1501 
V L "f" 13 827 "int8" `1697 
F G "FindDirEntry" 13 828 "int8(*int8 fname,int8 f)" `1500 
V L "pDir" 13 829 "*DIR" `1695 
V L "i" 13 830 "int16" `1696 
V L "filename" 13 831 "int8[16]" `1697 
V L "nextcluster" 13 832 "int32" `1698 
V L "actsector" 13 832 "int32" `1699 
C L "FindDirEntry" 13 568 1 "FUNCTION"
C L "TryFile" 13 568 2 "FUNCTION"
F N "TryFile" 13 879 ""
V L "fname" 13 879 "*int8" `1701 
V L "f" 13 879 "*int8" `1702 
F G "TryFile" 13 880 "*int8(*int8 fname,*int8 f)" `1700 
V L "i" 13 881 "int8" `1703 
V L "leng" 13 881 "int8" `1704 
V L "filename" 13 882 "*int8" `1705 
F N "strfill" 13 916 ""
V L "dest" 13 916 "*int8" `1707 
V L "source" 13 916 "*int8" `1708 
V L "position" 13 916 "int8" `1709 
F G "strfill" 13 917 "void(*int8 dest,*int8 source,int8 position)" `1706 
V L "d" 13 918 "*int8" `1710 
C L "InitList" 13 568 11 "FUNCTION"
F N "InitList" 13 940 ""
V L "path" 13 940 "*int8" `1712 
F G "InitList" 13 941 "MMCResponse(*int8 path)" `1503 
V L "f" 13 942 "int8" `1711 
C L "ListFiles" 13 568 3 "FUNCTION"
F N "ListFiles" 13 960 ""
V L "f" 13 960 "int8" `1713 
F G "ListFiles" 13 961 "int8(int8 f)" `1505 
V L "pDir" 13 962 "*DIR" `1712 
V L "filename" 13 963 "int8[14]" `1713  "should be enough with 13+1"
V L "i" 13 964 "int8" `1714 
V L "u" 13 964 "int8" `1715 
V L "fni" 13 964 "int8" `1716 
V L "len" 13 964 "int8" `1717 
V L "isLongFileName" 13 965 "int1" `1718 
V L "nextcluster" 13 966 "int32" `1719 
V L "actsector" 13 966 "int32" `1720 
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "ListFiles" 13 568 1 "FUNCTION"
C L "NextPage" 13 568 2 "FUNCTION"
F N "NextPage" 13 1089 ""
V L "f" 13 1089 "int8" `1724 
F G "NextPage" 13 1090 "MMCResponse(int8 f)" `1507 
V L "nextcluster" 13 1091 "int32" `1723 
V L "actsector" 13 1091 "int32" `1724 
C L "NextPage" 13 568 1 "FUNCTION"
C L "SetPage" 13 568 1 "FUNCTION"
F N "SetPage" 13 1125 ""
V L "f" 13 1125 "int8" `1510 
V L "page" 13 1125 "int32" `1727 
F G "SetPage" 13 1126 "MMCResponse(int8 f,int32 page)" `1509 
V L "i" 13 1127 "int32" `1725 
V L "res" 13 1128 "MMCResponse" `1726 
C L "SetPage" 13 568 1 "FUNCTION"
C L "SetPage" 13 568 1 "FUNCTION"
F N "CloseList" 13 1151 ""
V L "f" 13 1151 "int8" `1728 
F G "CloseList" 13 1152 "MMCResponse(int8 f)" `1512 
F N "FreeList" 13 1159 ""
F G "FreeList" 13 1160 "void()" `1514 
V L "i" 13 1161 "int8" `1727 
C L "FreeList" 13 568 1 "FUNCTION"
C L "FreeList" 13 568 1 "FUNCTION"
C L "FreeList" 13 568 1 "FUNCTION"
C L "fcreate" 13 568 2 "FUNCTION"
F N "fcreate" 13 1174 ""
V L "f" 13 1174 "int8" `1729 
V L "fname" 13 1174 "*int8" `1730 
F G "fcreate" 13 1175 "MMCResponse(int8 f,*int8 fname)" `1728 
V L "pDir" 13 1176 "*DIR" `1731 
V L "actsector" 13 1177 "int32" `1732 
V L "actcl" 13 1177 "int32" `1733 
V L "i" 13 1178 "int16" `1734 
C L "fcreate" 13 568 1 "FUNCTION"
F N "ComposeCluster" 13 1216 ""
V L "f" 13 1216 "int8" `1736 
F G "ComposeCluster" 13 1217 "int32(int8 f)" `1735 
V L "retval" 13 1218 "int32" `1737 
C L "fopen" 13 568 2 "FUNCTION"
F N "fopen" 13 1228 ""
V L "fname" 13 1228 "*int8" `1516 
V L "mode" 13 1228 "int8" `1740 
F G "fopen" 13 1229 "MMCResponse(*int8 fname,int8 mode)" `1515 
V L "found" 13 1230 "int8" `1738 
V L "f" 13 1231 "int8" `1739 
V L "actsector" 13 1232 "int32" `1740 
V L "actcluster" 13 1232 "int32" `1741 
V L "nextcluster" 13 1232 "int32" `1742 
V L "filename" 13 1233 "*int8" `1743 
C L "fopen" 13 568 1 "FUNCTION"
C L "fclose" 13 568 1 "FUNCTION"
F N "fclose" 13 1296 ""
V L "f" 13 1296 "int8" `1745 
F G "fclose" 13 1297 "MMCResponse(int8 f)" `1518 
C L "fflush" 13 568 1 "FUNCTION"
F N "fflush" 13 1307 ""
V L "f" 13 1307 "int8" `1745 
F G "fflush" 13 1308 "MMCResponse(int8 f)" `1520 
V L "actsector" 13 1309 "int32" `1744 
V L "pDir" 13 1310 "*DIR" `1745 
C L "fflush" 13 568 1 "FUNCTION"
C L "cwd" 13 568 1 "FUNCTION"
F N "cwd" 13 1330 ""
V L "fname" 13 1330 "*int8" `1523 
V L "f" 13 1330 "int8" `1748 
F G "cwd" 13 1331 "int8(*int8 fname,int8 f)" `1522 
V L "actsector" 13 1332 "int32" `1746 
C L "cwd" 13 568 1 "FUNCTION"
C L "cwd" 13 568 1 "FUNCTION"
C L "cwd" 13 568 1 "FUNCTION"
C L "cwd" 13 568 1 "FUNCTION"
C L "fputch" 13 568 1 "FUNCTION"
F N "fputch" 13 1357 ""
V L "be" 13 1357 "int8" `1526 
V L "f" 13 1357 "int8" `1749 
F G "fputch" 13 1358 "MMCResponse(int8 be,int8 f)" `1525 
V L "nextcluster" 13 1359 "int32" `1747 
V L "actsector" 13 1359 "int32" `1748 
C L "fputstring" 13 568 1 "FUNCTION"
F N "fputstring" 13 1385 ""
V L "be" 13 1385 "*int8" `1532 
V L "f" 13 1385 "int8" `1751 
F G "fputstring" 13 1386 "MMCResponse(*int8 be,int8 f)" `1531 
V L "leng" 13 1387 "int16" `1749 
V L "i" 13 1387 "int16" `1750 
C L "fread" 13 568 1 "FUNCTION"
F N "fread" 13 1398 ""
V L "buffer" 13 1398 "*int8" `1535 
V L "leng" 13 1398 "int16" `1536 
V L "f" 13 1398 "int8" `1754 
F G "fread" 13 1399 "int16(*int8 buffer,int16 leng,int8 f)" `1534 
V L "i" 13 1400 "int16" `1751 
V L "retv" 13 1400 "int16" `1752 
V L "c" 13 1401 "int8" `1753 
V L "v" 13 1401 "int8" `1754 
C L "fwrite" 13 568 1 "FUNCTION"
F N "fwrite" 13 1421 ""
V L "buffer" 13 1421 "*int8" `1539 
V L "leng" 13 1421 "int16" `1540 
V L "f" 13 1421 "int8" `1758 
F G "fwrite" 13 1422 "MMCResponse(*int8 buffer,int16 leng,int8 f)" `1538 
V L "i" 13 1423 "int16" `1755 
C L "fgetch" 13 568 1 "FUNCTION"
F N "fgetch" 13 1433 ""
V L "ki" 13 1433 "*int8" `1529 
V L "f" 13 1433 "int8" `1758 
F G "fgetch" 13 1434 "MMCResponse(*int8 ki,int8 f)" `1528 
V L "nextcluster" 13 1435 "int32" `1756 
V L "actsector" 13 1435 "int32" `1757 
C L "remove" 13 568 1 "FUNCTION"
F N "remove" 13 1459 ""
V L "fname" 13 1459 "*int8" `1759 
F G "remove" 13 1460 "MMCResponse(*int8 fname)" `1542 
V L "i" 13 1461 "int8" `1758 
V L "found" 13 1461 "int8" `1759 
V L "f" 13 1462 "int8" `1760 
V L "pDir" 13 1463 "*DIR" `1761 
V L "nextcluster" 13 1464 "int32" `1762 
V L "CurrentCluster" 13 1464 "int32" `1763 
V L "filename" 13 1465 "*int8" `1764 
C L "getfsize" 13 568 1 "FUNCTION"
F N "getfsize" 13 1504 ""
V L "fname" 13 1504 "*int8" `1545 
V L "fsiz" 13 1504 "*int32" `1767 
F G "getfsize" 13 1505 "MMCResponse(*int8 fname,*int32 fsiz)" `1544 
V L "found" 13 1506 "int8" `1765 
V L "f" 13 1507 "int8" `1766 
V L "pDir" 13 1508 "*DIR" `1767 
V L "filename" 13 1509 "*int8" `1768 
F N "wite_data_sd" 11 3 ""
F G "wite_data_sd" 11 4 "void()" `1769 
C L "wite_data_sd" 11 6 33 "FUNCTION"
F N "key" 16 1 ""
F G "key" 16 2 "int8()" `1784 
V L "result" 16 3 "int8" `1785 
F N "scan_key" 16 10 ""
F G "scan_key" 16 11 "void()" `1786 
F N "show_lcd" 16 3984 ""
F G "show_lcd" 16 3985 "void()" `1817 
F N "TIMER1_isr" 0 8 ""
F G "TIMER1_isr" 0 8 "void()" `2472 
C L "TIMER1_isr" 0 9 1 "FUNCTION"
C L "TIMER1_isr" 0 9 1 "FUNCTION"
C L "TIMER1_isr" 0 9 2 "FUNCTION"
C L "TIMER1_isr" 0 9 1 "FUNCTION"
C L "TIMER1_isr" 0 9 1 "FUNCTION"
C L "TIMER1_isr" 0 9 1 "FUNCTION"
F N "RDA_485" 0 209 ""
F G "RDA_485" 0 209 "void()" `2486 
V L "value" 0 210 "int8" `2487 
F N "MAIN" 0 215 ""
F G "MAIN" 0 216 "void()" `2488 
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 2 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "output_f" 1 0
F B "output_g" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "input_f" 0 0
F B "input_g" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "set_tris_f" 1 0
F B "set_tris_g" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "get_tris_f" 0 0
F B "get_tris_g" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "input_change_f" 0 0
F B "input_change_g" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 2
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "spi_xfer" 0 3
